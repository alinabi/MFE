fmod MAA is
  sorts Xbool Nat Bit Octet OctetSum Half HalfSum Block BlockSum Pair Key Message SegmentedMessage .
  op Xfalse : -> Xbool [ctor] .
  op Xtrue : -> Xbool [ctor] .
  op x0 : -> Bit [ctor] .
  op x1 : -> Bit [ctor] .
  op buildOctet : Bit Bit Bit Bit Bit Bit Bit Bit -> Octet [ctor] .
  op buildOctetSum : Bit Octet -> OctetSum [ctor] .
  op buildHalf : Octet Octet -> Half [ctor] .
  op buildHalfSum : Bit Half -> HalfSum [ctor] .
  op buildBlock : Octet Octet Octet Octet -> Block [ctor] .
  op buildBlockSum : Bit Block -> BlockSum [ctor] .
  op buildPair : Block Block -> Pair [ctor] .
  op zero : -> Nat [ctor] .
  op succ : Nat -> Nat [ctor] .
  op buildKey : Block Block -> Key [ctor] .
  op unitMessage : Block -> Message [ctor] .
  op consMessage : Block Message -> Message [ctor] .
  op unitSegment : Message -> SegmentedMessage [ctor] .
  op consSegment : Message SegmentedMessage -> SegmentedMessage [ctor] .
  op notBool : Xbool -> Xbool .
  op andBool : Xbool Xbool -> Xbool .
  op orBool : Xbool Xbool -> Xbool .
  op xorBool : Xbool Xbool -> Xbool .
  op notBit : Bit -> Bit .
  op andBit : Bit Bit -> Bit .
  op orBit : Bit Bit -> Bit .
  op xorBit : Bit Bit -> Bit .
  op x00 : -> Octet .
  op x01 : -> Octet .
  op x0000 : -> Half .
  op HalfU : Block -> Half .
  op HalfL : Block -> Half .
  op eqBit : Bit Bit -> Xbool .
  op eqOctet : Octet Octet -> Xbool .
  op eqOctetSum : OctetSum OctetSum -> Xbool .
  op eqHalf : Half Half -> Xbool .
  op eqHalfSum : HalfSum HalfSum -> Xbool .
  op eqBlock : Block Block -> Xbool .
  op eqBlockSum : BlockSum BlockSum -> Xbool .
  op eqPair : Pair Pair -> Xbool .
  op addBit : Bit Bit Bit -> Bit .
  op carBit : Bit Bit Bit -> Bit .
  op addOctetSum : Octet Octet Bit -> OctetSum .
  op addOctet8 : Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit -> OctetSum .
  op addOctet7 : Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit -> OctetSum .
  op addOctet6 : Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit -> OctetSum .
  op addOctet5 : Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit -> OctetSum .
  op addOctet4 : Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit -> OctetSum .
  op addOctet3 : Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit -> OctetSum .
  op addOctet2 : Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit -> OctetSum .
  op addOctet1 : Bit Bit Bit Bit Bit Bit Bit Bit Bit Bit -> OctetSum .
  op addOctet0 : Bit Bit Bit Bit Bit Bit Bit Bit Bit -> OctetSum .
  op dropCarryOctetSum : OctetSum -> Octet .
  op addOctet : Octet Octet -> Octet .
  op addHalfSum : Half Half -> HalfSum .
  op addHalf2 : Octet Octet Octet Octet -> HalfSum .
  op addHalf1 : Octet Octet OctetSum -> HalfSum .
  op addHalf0 : OctetSum Octet -> HalfSum .
  op dropCarryHalfSum : HalfSum -> Half .
  op addHalf : Half Half -> Half .
  op addHalfOctet : Octet Half -> Half .
  op addHalfOctets : Octet Octet -> Half .
  op addBlockSum : Block Block -> BlockSum .
  op addBlock4 : Octet Octet Octet Octet Octet Octet Octet Octet -> BlockSum .
  op addBlock3 : Octet Octet Octet Octet Octet Octet OctetSum -> BlockSum .
  op addBlock2 : Octet Octet Octet Octet OctetSum Octet -> BlockSum .
  op addBlock1 : Octet Octet OctetSum Octet Octet -> BlockSum .
  op addBlock0 : OctetSum Octet Octet Octet -> BlockSum .
  op dropCarryBlockSum : BlockSum -> Block .
  op addBlock : Block Block -> Block .
  op addBlockHalf : Half Block -> Block .
  op addBlockHalves : Half Half -> Block .
  op leftOctet1 : Octet -> Octet .
  op leftOctet2 : Octet -> Octet .
  op leftOctet3 : Octet -> Octet .
  op leftOctet4 : Octet -> Octet .
  op leftOctet5 : Octet -> Octet .
  op leftOctet6 : Octet -> Octet .
  op leftOctet7 : Octet -> Octet .
  op rightOctet1 : Octet -> Octet .
  op rightOctet2 : Octet -> Octet .
  op rightOctet3 : Octet -> Octet .
  op rightOctet4 : Octet -> Octet .
  op rightOctet5 : Octet -> Octet .
  op rightOctet6 : Octet -> Octet .
  op rightOctet7 : Octet -> Octet .
  op mulOctet : Octet Octet -> Half .
  op mulOctet1 : Bit Bit Bit Bit Bit Bit Bit Bit Octet Half -> Half .
  op mulOctet2 : Bit Bit Bit Bit Bit Bit Bit Octet Half -> Half .
  op mulOctet3 : Bit Bit Bit Bit Bit Bit Octet Half -> Half .
  op mulOctet4 : Bit Bit Bit Bit Bit Octet Half -> Half .
  op mulOctet5 : Bit Bit Bit Bit Octet Half -> Half .
  op mulOctet6 : Bit Bit Bit Octet Half -> Half .
  op mulOctet7 : Bit Bit Octet Half -> Half .
  op mulOctet8 : Bit Octet Half -> Half .
  op mulOctetA : Half Octet Octet -> Half .
  op mulOctetB : Octet OctetSum -> Half .
  op mulHalf : Half Half -> Block .
  op mulHalfA : Half Half Half Half -> Block .
  op mulHalf4 : Octet Octet Octet Octet Octet Octet Octet Octet -> Block .
  op mulHalf3 : Octet Octet Octet Octet Half Octet -> Block .
  op mulHalf2 : Octet Half Octet Octet -> Block .
  op mulHalf1 : Half Octet Octet Octet -> Block .
  op mulBlock : Block Block -> Pair .
  op mulBlockA : Block Block Block Block -> Pair .
  op mulBlock4 : Half Half Half Half Half Half Half Half -> Pair .
  op mulBlock3 : Half Half Half Half Block Half -> Pair .
  op mulBlock2 : Half Block Half Half -> Pair .
  op mulBlock1 : Block Half Half Half -> Pair .
  op mulBlockB : Half Half Half Half -> Pair .
  op addNat : Nat Nat -> Nat .
  op multNat : Nat Nat -> Nat .
  op eqNat : Nat Nat -> Xbool .
  op ltNat : Nat Nat -> Xbool .
  op n1 : -> Nat .
  op n2 : -> Nat .
  op n3 : -> Nat .
  op n4 : -> Nat .
  op n5 : -> Nat .
  op n6 : -> Nat .
  op n7 : -> Nat .
  op n8 : -> Nat .
  op n9 : -> Nat .
  op n10 : -> Nat .
  op n11 : -> Nat .
  op n12 : -> Nat .
  op n13 : -> Nat .
  op n14 : -> Nat .
  op n15 : -> Nat .
  op n16 : -> Nat .
  op n17 : -> Nat .
  op n18 : -> Nat .
  op n19 : -> Nat .
  op n20 : -> Nat .
  op n21 : -> Nat .
  op n22 : -> Nat .
  op n254 : -> Nat .
  op n256 : -> Nat .
  op n4100 : -> Nat .
  op andOctet : Octet Octet -> Octet .
  op orOctet : Octet Octet -> Octet .
  op xorOctet : Octet Octet -> Octet .
  op x02 : -> Octet .
  op x03 : -> Octet .
  op x04 : -> Octet .
  op x05 : -> Octet .
  op x06 : -> Octet .
  op x07 : -> Octet .
  op x08 : -> Octet .
  op x09 : -> Octet .
  op x0A : -> Octet .
  op x0B : -> Octet .
  op x0C : -> Octet .
  op x0D : -> Octet .
  op x0E : -> Octet .
  op x0F : -> Octet .
  op x10 : -> Octet .
  op x11 : -> Octet .
  op x12 : -> Octet .
  op x13 : -> Octet .
  op x14 : -> Octet .
  op x15 : -> Octet .
  op x16 : -> Octet .
  op x17 : -> Octet .
  op x18 : -> Octet .
  op x1A : -> Octet .
  op x1B : -> Octet .
  op x1C : -> Octet .
  op x1D : -> Octet .
  op x1E : -> Octet .
  op x1F : -> Octet .
  op x20 : -> Octet .
  op x21 : -> Octet .
  op x23 : -> Octet .
  op x24 : -> Octet .
  op x25 : -> Octet .
  op x26 : -> Octet .
  op x27 : -> Octet .
  op x28 : -> Octet .
  op x29 : -> Octet .
  op x2A : -> Octet .
  op x2B : -> Octet .
  op x2D : -> Octet .
  op x2E : -> Octet .
  op x2F : -> Octet .
  op x30 : -> Octet .
  op x31 : -> Octet .
  op x32 : -> Octet .
  op x33 : -> Octet .
  op x34 : -> Octet .
  op x35 : -> Octet .
  op x36 : -> Octet .
  op x37 : -> Octet .
  op x38 : -> Octet .
  op x39 : -> Octet .
  op x3A : -> Octet .
  op x3B : -> Octet .
  op x3C : -> Octet .
  op x3D : -> Octet .
  op x3F : -> Octet .
  op x40 : -> Octet .
  op x46 : -> Octet .
  op x48 : -> Octet .
  op x49 : -> Octet .
  op x4A : -> Octet .
  op x4B : -> Octet .
  op x4C : -> Octet .
  op x4D : -> Octet .
  op x4E : -> Octet .
  op x4F : -> Octet .
  op x50 : -> Octet .
  op x51 : -> Octet .
  op x53 : -> Octet .
  op x54 : -> Octet .
  op x55 : -> Octet .
  op x58 : -> Octet .
  op x5A : -> Octet .
  op x5B : -> Octet .
  op x5C : -> Octet .
  op x5D : -> Octet .
  op x5E : -> Octet .
  op x5F : -> Octet .
  op x60 : -> Octet .
  op x61 : -> Octet .
  op x62 : -> Octet .
  op x63 : -> Octet .
  op x64 : -> Octet .
  op x65 : -> Octet .
  op x66 : -> Octet .
  op x67 : -> Octet .
  op x69 : -> Octet .
  op x6A : -> Octet .
  op x6B : -> Octet .
  op x6C : -> Octet .
  op x6D : -> Octet .
  op x6E : -> Octet .
  op x6F : -> Octet .
  op x70 : -> Octet .
  op x71 : -> Octet .
  op x72 : -> Octet .
  op x73 : -> Octet .
  op x74 : -> Octet .
  op x75 : -> Octet .
  op x76 : -> Octet .
  op x77 : -> Octet .
  op x78 : -> Octet .
  op x79 : -> Octet .
  op x7A : -> Octet .
  op x7B : -> Octet .
  op x7C : -> Octet .
  op x7D : -> Octet .
  op x7E : -> Octet .
  op x7F : -> Octet .
  op x80 : -> Octet .
  op x81 : -> Octet .
  op x83 : -> Octet .
  op x84 : -> Octet .
  op x85 : -> Octet .
  op x86 : -> Octet .
  op x88 : -> Octet .
  op x89 : -> Octet .
  op x8A : -> Octet .
  op x8C : -> Octet .
  op x8D : -> Octet .
  op x8E : -> Octet .
  op x8F : -> Octet .
  op x90 : -> Octet .
  op x91 : -> Octet .
  op x92 : -> Octet .
  op x93 : -> Octet .
  op x95 : -> Octet .
  op x96 : -> Octet .
  op x97 : -> Octet .
  op x98 : -> Octet .
  op x99 : -> Octet .
  op x9A : -> Octet .
  op x9B : -> Octet .
  op x9C : -> Octet .
  op x9D : -> Octet .
  op x9E : -> Octet .
  op x9F : -> Octet .
  op xA0 : -> Octet .
  op xA1 : -> Octet .
  op xA2 : -> Octet .
  op xA3 : -> Octet .
  op xA4 : -> Octet .
  op xA5 : -> Octet .
  op xA6 : -> Octet .
  op xA7 : -> Octet .
  op xA8 : -> Octet .
  op xA9 : -> Octet .
  op xAA : -> Octet .
  op xAB : -> Octet .
  op xAC : -> Octet .
  op xAE : -> Octet .
  op xAF : -> Octet .
  op xB0 : -> Octet .
  op xB1 : -> Octet .
  op xB2 : -> Octet .
  op xB3 : -> Octet .
  op xB5 : -> Octet .
  op xB6 : -> Octet .
  op xB8 : -> Octet .
  op xB9 : -> Octet .
  op xBA : -> Octet .
  op xBB : -> Octet .
  op xBC : -> Octet .
  op xBE : -> Octet .
  op xBF : -> Octet .
  op xC0 : -> Octet .
  op xC1 : -> Octet .
  op xC2 : -> Octet .
  op xC4 : -> Octet .
  op xC5 : -> Octet .
  op xC6 : -> Octet .
  op xC7 : -> Octet .
  op xC8 : -> Octet .
  op xC9 : -> Octet .
  op xCA : -> Octet .
  op xCB : -> Octet .
  op xCC : -> Octet .
  op xCD : -> Octet .
  op xCE : -> Octet .
  op xD0 : -> Octet .
  op xD1 : -> Octet .
  op xD2 : -> Octet .
  op xD3 : -> Octet .
  op xD4 : -> Octet .
  op xD5 : -> Octet .
  op xD6 : -> Octet .
  op xD7 : -> Octet .
  op xD8 : -> Octet .
  op xD9 : -> Octet .
  op xDB : -> Octet .
  op xDC : -> Octet .
  op xDD : -> Octet .
  op xDE : -> Octet .
  op xDF : -> Octet .
  op xE0 : -> Octet .
  op xE1 : -> Octet .
  op xE3 : -> Octet .
  op xE6 : -> Octet .
  op xE8 : -> Octet .
  op xE9 : -> Octet .
  op xEA : -> Octet .
  op xEB : -> Octet .
  op xEC : -> Octet .
  op xED : -> Octet .
  op xEE : -> Octet .
  op xEF : -> Octet .
  op xF0 : -> Octet .
  op xF1 : -> Octet .
  op xF2 : -> Octet .
  op xF3 : -> Octet .
  op xF4 : -> Octet .
  op xF5 : -> Octet .
  op xF6 : -> Octet .
  op xF7 : -> Octet .
  op xF8 : -> Octet .
  op xF9 : -> Octet .
  op xFA : -> Octet .
  op xFB : -> Octet .
  op xFC : -> Octet .
  op xFD : -> Octet .
  op xFE : -> Octet .
  op xFF : -> Octet .
  op andBlock : Block Block -> Block .
  op orBlock : Block Block -> Block .
  op xorBlock : Block Block -> Block .
  op x0001 : -> Half .
  op x00000000 : -> Block .
  op x00000001 : -> Block .
  op x00000002 : -> Block .
  op x00000003 : -> Block .
  op x00000004 : -> Block .
  op x00000005 : -> Block .
  op x00000006 : -> Block .
  op x00000007 : -> Block .
  op x00000008 : -> Block .
  op x00000009 : -> Block .
  op x0000000A : -> Block .
  op x0000000B : -> Block .
  op x0000000C : -> Block .
  op x0000000D : -> Block .
  op x0000000E : -> Block .
  op x0000000F : -> Block .
  op x00000010 : -> Block .
  op x00000012 : -> Block .
  op x00000014 : -> Block .
  op x00000016 : -> Block .
  op x00000018 : -> Block .
  op x0000001B : -> Block .
  op x0000001D : -> Block .
  op x0000001E : -> Block .
  op x0000001F : -> Block .
  op x00000031 : -> Block .
  op x00000036 : -> Block .
  op x00000060 : -> Block .
  op x00000080 : -> Block .
  op x000000A5 : -> Block .
  op x000000B6 : -> Block .
  op x000000C4 : -> Block .
  op x000000D2 : -> Block .
  op x00000100 : -> Block .
  op x00000129 : -> Block .
  op x0000018C : -> Block .
  op x00004000 : -> Block .
  op x00010000 : -> Block .
  op x00020000 : -> Block .
  op x00030000 : -> Block .
  op x00040000 : -> Block .
  op x00060000 : -> Block .
  op x00804021 : -> Block .
  op x00FF00FF : -> Block .
  op x0103050B : -> Block .
  op x01030703 : -> Block .
  op x01030705 : -> Block .
  op x0103070F : -> Block .
  op x02040801 : -> Block .
  op x0297AF6F : -> Block .
  op x07050301 : -> Block .
  op x077788A2 : -> Block .
  op x07C72EAA : -> Block .
  op x0A202020 : -> Block .
  op x0AD67E20 : -> Block .
  op x10000000 : -> Block .
  op x11A9D254 : -> Block .
  op x11AC46B8 : -> Block .
  op x1277A6D4 : -> Block .
  op x13647149 : -> Block .
  op x160EE9B5 : -> Block .
  op x17065DBB : -> Block .
  op x17A808FD : -> Block .
  op x1D10D8D3 : -> Block .
  op x1D3B7760 : -> Block .
  op x1D9C9655 : -> Block .
  op x1F3F7FFF : -> Block .
  op x204E80A7 : -> Block .
  op x21D869BA : -> Block .
  op x24B66FB5 : -> Block .
  op x270EEDAF : -> Block .
  op x277B4B25 : -> Block .
  op x2829040B : -> Block .
  op x288FC786 : -> Block .
  op x28EAD8B3 : -> Block .
  op x29907CD8 : -> Block .
  op x29C1485F : -> Block .
  op x29EEE96B : -> Block .
  op x2A6091AE : -> Block .
  op x2BF8499A : -> Block .
  op x2E80AC30 : -> Block .
  op x2FD76FFB : -> Block .
  op x30261492 : -> Block .
  op x303FF4AA : -> Block .
  op x33D5A466 : -> Block .
  op x344925FC : -> Block .
  op x34ACF886 : -> Block .
  op x3CD54DEB : -> Block .
  op x3CF3A7D2 : -> Block .
  op x3DD81AC6 : -> Block .
  op x3F6F7248 : -> Block .
  op x48B204D6 : -> Block .
  op x4A645A01 : -> Block .
  op x4C49AAE0 : -> Block .
  op x4CE933E1 : -> Block .
  op x4D53901A : -> Block .
  op x4DA124A1 : -> Block .
  op x4F998E01 : -> Block .
  op x4FB1138A : -> Block .
  op x50DEC930 : -> Block .
  op x51AF3C1D : -> Block .
  op x51EDE9C7 : -> Block .
  op x550D91CE : -> Block .
  op x55555555 : -> Block .
  op x55DD063F : -> Block .
  op x5834A585 : -> Block .
  op x5A35D667 : -> Block .
  op x5BC02502 : -> Block .
  op x5CCA3239 : -> Block .
  op x5EBA06C2 : -> Block .
  op x5F38EEF1 : -> Block .
  op x613F8E2A : -> Block .
  op x63C70DBA : -> Block .
  op x6AD6E8A4 : -> Block .
  op x6AEBACF8 : -> Block .
  op x6D67E884 : -> Block .
  op x7050EC5E : -> Block .
  op x717153D5 : -> Block .
  op x7201F4DC : -> Block .
  op x7397C9AE : -> Block .
  op x74B39176 : -> Block .
  op x76232E5F : -> Block .
  op x7783C51D : -> Block .
  op x7792F9D4 : -> Block .
  op x7BC180AB : -> Block .
  op x7DB2D9F4 : -> Block .
  op x7DFEFBFF : -> Block .
  op x7F76A3B0 : -> Block .
  op x7F839576 : -> Block .
  op x7FFFFFF0 : -> Block .
  op x7FFFFFF1 : -> Block .
  op x7FFFFFFC : -> Block .
  op x7FFFFFFD : -> Block .
  op x80000000 : -> Block .
  op x80000002 : -> Block .
  op x800000C2 : -> Block .
  op x80018000 : -> Block .
  op x80018001 : -> Block .
  op x80397302 : -> Block .
  op x81D10CA3 : -> Block .
  op x89D635D7 : -> Block .
  op x8CE37709 : -> Block .
  op x8DC8BBDE : -> Block .
  op x9115A558 : -> Block .
  op x91896CFA : -> Block .
  op x9372CDC6 : -> Block .
  op x98D1CC75 : -> Block .
  op x9D15C437 : -> Block .
  op x9DB15CF6 : -> Block .
  op x9E2E7B36 : -> Block .
  op xA018C83B : -> Block .
  op xA0B87B77 : -> Block .
  op xA44AAAC0 : -> Block .
  op xA511987A : -> Block .
  op xA70FC148 : -> Block .
  op xA93BD410 : -> Block .
  op xAAAAAAAA : -> Block .
  op xAB00FFCD : -> Block .
  op xAB01FCCD : -> Block .
  op xAB6EED4A : -> Block .
  op xABEEED6B : -> Block .
  op xACBC13DD : -> Block .
  op xB1CC1CC5 : -> Block .
  op xB8142629 : -> Block .
  op xB99A62DE : -> Block .
  op xBA92DB12 : -> Block .
  op xBBA57835 : -> Block .
  op xBE9F0917 : -> Block .
  op xBF2D7D85 : -> Block .
  op xBFEF7FDF : -> Block .
  op xC1ED90DD : -> Block .
  op xC21A1846 : -> Block .
  op xC4EB1AEB : -> Block .
  op xC6B1317E : -> Block .
  op xCBC865BA : -> Block .
  op xCD959B46 : -> Block .
  op xD0482465 : -> Block .
  op xD636250D : -> Block .
  op xD7843FDC : -> Block .
  op xD78634BC : -> Block .
  op xD8804CA5 : -> Block .
  op xDB79FBDC : -> Block .
  op xDB9102B0 : -> Block .
  op xE0C08000 : -> Block .
  op xE6A12F07 : -> Block .
  op xEB35B97F : -> Block .
  op xF0239DD5 : -> Block .
  op xF14D6E28 : -> Block .
  op xF2EF3501 : -> Block .
  op xF6A09667 : -> Block .
  op xFD297DA4 : -> Block .
  op xFDC1A8BA : -> Block .
  op xFE4E5BDD : -> Block .
  op xFEA1D334 : -> Block .
  op xFECCAA6E : -> Block .
  op xFEFC07F0 : -> Block .
  op xFF2D7DA5 : -> Block .
  op xFFEF0001 : -> Block .
  op xFFFF00FF : -> Block .
  op xFFFFFF2D : -> Block .
  op xFFFFFF3A : -> Block .
  op xFFFFFFF0 : -> Block .
  op xFFFFFFF1 : -> Block .
  op xFFFFFFF4 : -> Block .
  op xFFFFFFF5 : -> Block .
  op xFFFFFFF7 : -> Block .
  op xFFFFFFF9 : -> Block .
  op xFFFFFFFA : -> Block .
  op xFFFFFFFB : -> Block .
  op xFFFFFFFC : -> Block .
  op xFFFFFFFD : -> Block .
  op xFFFFFFFE : -> Block .
  op xFFFFFFFF : -> Block .
  op appendMessage : Message Block -> Message .
  op reverseMessage : Message -> Message .
  op makeMessage : Nat Block Block -> Message .
  op splitSegment : Message -> SegmentedMessage .
  op cutSegment : Message Message Nat -> SegmentedMessage .
  op ADD : Block Block -> Block .
  op AND : Block Block -> Block .
  op MUL : Block Block -> Pair .
  op OR : Block Block -> Block .
  op XOR : Block Block -> Block .
  op XOR-prime : Pair -> Block .
  op CYC : Block -> Block .
  op nCYC : Nat Block -> Block .
  op FIX1 : Block -> Block .
  op FIX2 : Block -> Block .
  op needAdjust : Octet -> Xbool .
  op adjustCode : Octet -> Bit .
  op adjust : Octet Octet -> Octet .
  op PAT : Block Block -> Octet .
  op BYT : Block Block -> Pair .
  op BYT-prime : Octet Octet Octet Octet Octet Octet Octet Octet Octet -> Pair .
  op ADDC : Block Block -> Pair .
  op ADDC-prime : BlockSum -> Pair .
  op MUL1 : Block Block -> Block .
  op MUL1XY : Pair -> Block .
  op MUL1UL : Block Block -> Block .
  op MUL1SC : Pair -> Block .
  op MUL2 : Block Block -> Block .
  op MUL2XY : Pair -> Block .
  op MUL2UL : Block Block -> Block .
  op MUL2DEL : Pair Block -> Block .
  op MUL2FL : Block Block -> Block .
  op MUL2SC : Pair -> Block .
  op MUL2A : Block Block -> Block .
  op MUL2AXY : Pair -> Block .
  op MUL2AUL : Block Block -> Block .
  op MUL2ADL : Block Block -> Block .
  op MUL2ASC : Pair -> Block .
  op squareHalf : Half -> Block .
  op Q : Octet -> Block .
  op H4 : Block -> Block .
  op H6 : Block -> Block .
  op H8 : Block -> Block .
  op H0 : Block -> Block .
  op H5 : Block Octet -> Block .
  op H7 : Block -> Block .
  op H9 : Block -> Block .
  op J1-2 : Block -> Block .
  op J1-4 : Block -> Block .
  op J1-6 : Block -> Block .
  op J1-8 : Block -> Block .
  op J2-2 : Block -> Block .
  op J2-4 : Block -> Block .
  op J2-6 : Block -> Block .
  op J2-8 : Block -> Block .
  op K1-2 : Block -> Block .
  op K1-4 : Block -> Block .
  op K1-5 : Block -> Block .
  op K1-7 : Block -> Block .
  op K1-9 : Block -> Block .
  op K2-2 : Block -> Block .
  op K2-4 : Block -> Block .
  op K2-5 : Block -> Block .
  op K2-7 : Block -> Block .
  op K2-9 : Block -> Block .
  op preludeXY : Block Block -> Pair .
  op preludeVW : Block Block -> Pair .
  op preludeST : Block Block -> Pair .
  op preludeXY-prime : Pair Octet -> Pair .
  op preludeVW-prime : Pair -> Pair .
  op preludeST-prime : Pair -> Pair .
  op computeXY : Pair Pair Block -> Pair .
  op computeXY-prime : Pair Block Block -> Pair .
  op computeVW : Pair -> Pair .
  op loop1 : Pair Pair Message -> Pair .
  op loop2 : Pair Pair Message -> Pair .
  op coda : Pair Pair Pair -> Block .
  op MAA : Key Message -> Block .
  op MAA-prime : Pair Pair Pair Message -> Block .
  op MAC : Key Message -> Block .
  op MACfirst : Key SegmentedMessage -> Block .
  op MACnext : Key Block SegmentedMessage -> Block .
  eq [001]: notBool (Xfalse) = Xtrue .
  eq [002]: notBool (Xtrue) = Xfalse .
  eq [003]: andBool (Xfalse, L:Xbool) = Xfalse .
  eq [004]: andBool (Xtrue, L:Xbool) = L:Xbool .
  eq [005]: orBool (Xfalse, L:Xbool) = L:Xbool .
  eq [006]: orBool (Xtrue, L:Xbool) = Xtrue .
  eq [007]: xorBool (Xfalse, L:Xbool) = L:Xbool .
  eq [008]: xorBool (Xtrue, L:Xbool) = notBool (L:Xbool) .
  eq [009]: notBit (x0) = x1 .
  eq [010]: notBit (x1) = x0 .
  eq [011]: andBit (B:Bit, x0) = x0 .
  eq [012]: andBit (B:Bit, x1) = B:Bit .
  eq [013]: orBit (B:Bit, x0) = B:Bit .
  eq [014]: orBit (B:Bit, x1) = x1 .
  eq [015]: xorBit (B:Bit, x0) = B:Bit .
  eq [016]: xorBit (B:Bit, x1) = notBit (B:Bit) .
  eq [017]: x00 = buildOctet (x0, x0, x0, x0, x0, x0, x0, x0) .
  eq [018]: x01 = buildOctet (x0, x0, x0, x0, x0, x0, x0, x1) .
  eq [019]: x0000 = buildHalf (x00, x00) .
  eq [020]: HalfU (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet)) = buildHalf (O1:Octet, O2:Octet) .
  eq [021]: HalfL (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet)) = buildHalf (O3:Octet, O4:Octet) .
  eq [022]: eqBit (x0, x0) = Xtrue .
  eq [023]: eqBit (x0, x1) = Xfalse .
  eq [024]: eqBit (x1, x0) = Xfalse .
  eq [025]: eqBit (x1, x1) = Xtrue .
  eq [026]: eqOctet (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit), buildOctet (B-prime1:Bit, B-prime2:Bit, B-prime3:Bit, B-prime4:Bit, B-prime5:Bit, B-prime6:Bit, B-prime7:Bit, B-prime8:Bit)) = andBool (eqBit (B1:Bit, B-prime1:Bit), andBool (eqBit (B2:Bit, B-prime2:Bit), andBool (eqBit (B3:Bit, B-prime3:Bit), andBool (eqBit (B4:Bit, B-prime4:Bit), andBool (eqBit (B5:Bit, B-prime5:Bit), andBool (eqBit (B6:Bit, B-prime6:Bit), andBool (eqBit (B7:Bit, B-prime7:Bit), eqBit (B8:Bit, B-prime8:Bit)))))))) .
  eq [027]: eqOctetSum (buildOctetSum (B:Bit, O:Octet), buildOctetSum (B-prime:Bit, O-prime:Octet)) = andBool (eqBit (B:Bit, B-prime:Bit), eqOctet (O:Octet, O-prime:Octet)) .
  eq [028]: eqHalf (buildHalf (O1:Octet, O2:Octet), buildHalf (O-prime1:Octet, O-prime2:Octet)) = andBool (eqOctet (O1:Octet, O-prime1:Octet), eqOctet (O2:Octet, O-prime2:Octet)) .
  eq [029]: eqHalfSum (buildHalfSum (B:Bit, H:Half), buildHalfSum (B-prime:Bit, H-prime:Half)) = andBool (eqBit (B:Bit, B-prime:Bit), eqHalf (H:Half, H-prime:Half)) .
  eq [030]: eqBlock (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet), buildBlock (O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet)) = andBool (andBool (eqOctet (O1:Octet, O-prime1:Octet), eqOctet (O2:Octet, O-prime2:Octet)), andBool (eqOctet (O3:Octet, O-prime3:Octet), eqOctet (O4:Octet, O-prime4:Octet))) .
  eq [031]: eqBlockSum (buildBlockSum (B:Bit, W:Block), buildBlockSum (B-prime:Bit, W-prime:Block)) = andBool (eqBit (B:Bit, B-prime:Bit), eqBlock (W:Block, W-prime:Block)) .
  eq [032]: eqPair (buildPair (W1:Block, W2:Block), buildPair (W-prime1:Block, W-prime2:Block)) = andBool (eqBlock (W1:Block, W-prime1:Block), eqBlock (W2:Block, W-prime2:Block)) .
  eq [033]: addBit (B:Bit, B-prime:Bit, Bcarry:Bit) = xorBit (xorBit (B:Bit, B-prime:Bit), Bcarry:Bit) .
  eq [034]: carBit (B:Bit, B-prime:Bit, Bcarry:Bit) = orBit (andBit (andBit (B:Bit, B-prime:Bit), notBit (Bcarry:Bit)), andBit (orBit (B:Bit, B-prime:Bit), Bcarry:Bit)) .
  eq [035]: addOctetSum (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit), buildOctet (B-prime1:Bit, B-prime2:Bit, B-prime3:Bit, B-prime4:Bit, B-prime5:Bit, B-prime6:Bit, B-prime7:Bit, B-prime8:Bit), Bcarry:Bit) = addOctet8 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, B5:Bit, B-prime5:Bit, B6:Bit, B-prime6:Bit, B7:Bit, B-prime7:Bit, B8:Bit, B-prime8:Bit, Bcarry:Bit) .
  eq [036]: addOctet8 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, B5:Bit, B-prime5:Bit, B6:Bit, B-prime6:Bit, B7:Bit, B-prime7:Bit, B8:Bit, B-prime8:Bit, Bcarry:Bit) = addOctet7 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, B5:Bit, B-prime5:Bit, B6:Bit, B-prime6:Bit, B7:Bit, B-prime7:Bit, carBit (B8:Bit, B-prime8:Bit, Bcarry:Bit), addBit (B8:Bit, B-prime8:Bit, Bcarry:Bit)) .
  eq [037]: addOctet7 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, B5:Bit, B-prime5:Bit, B6:Bit, B-prime6:Bit, B7:Bit, B-prime7:Bit, Bcarry:Bit, B-second8:Bit) = addOctet6 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, B5:Bit, B-prime5:Bit, B6:Bit, B-prime6:Bit, carBit (B7:Bit, B-prime7:Bit, Bcarry:Bit), addBit (B7:Bit, B-prime7:Bit, Bcarry:Bit), B-second8:Bit) .
  eq [038]: addOctet6 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, B5:Bit, B-prime5:Bit, B6:Bit, B-prime6:Bit, Bcarry:Bit, B-second7:Bit, B-second8:Bit) = addOctet5 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, B5:Bit, B-prime5:Bit, carBit (B6:Bit, B-prime6:Bit, Bcarry:Bit), addBit (B6:Bit, B-prime6:Bit, Bcarry:Bit), B-second7:Bit, B-second8:Bit) .
  eq [039]: addOctet5 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, B5:Bit, B-prime5:Bit, Bcarry:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) = addOctet4 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, carBit (B5:Bit, B-prime5:Bit, Bcarry:Bit), addBit (B5:Bit, B-prime5:Bit, Bcarry:Bit), B-second6:Bit, B-second7:Bit, B-second8:Bit) .
  eq [040]: addOctet4 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, B4:Bit, B-prime4:Bit, Bcarry:Bit, B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) = addOctet3 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, carBit (B4:Bit, B-prime4:Bit, Bcarry:Bit), addBit (B4:Bit, B-prime4:Bit, Bcarry:Bit), B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) .
  eq [041]: addOctet3 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, B3:Bit, B-prime3:Bit, Bcarry:Bit, B-second4:Bit, B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) = addOctet2 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, carBit (B3:Bit, B-prime3:Bit, Bcarry:Bit), addBit (B3:Bit, B-prime3:Bit, Bcarry:Bit), B-second4:Bit, B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) .
  eq [042]: addOctet2 (B1:Bit, B-prime1:Bit, B2:Bit, B-prime2:Bit, Bcarry:Bit, B-second3:Bit, B-second4:Bit, B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) = addOctet1 (B1:Bit, B-prime1:Bit, carBit (B2:Bit, B-prime2:Bit, Bcarry:Bit), addBit (B2:Bit, B-prime2:Bit, Bcarry:Bit), B-second3:Bit, B-second4:Bit, B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) .
  eq [043]: addOctet1 (B1:Bit, B-prime1:Bit, Bcarry:Bit, B-second2:Bit, B-second3:Bit, B-second4:Bit, B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) = addOctet0 (carBit (B1:Bit, B-prime1:Bit, Bcarry:Bit), addBit (B1:Bit, B-prime1:Bit, Bcarry:Bit), B-second2:Bit, B-second3:Bit, B-second4:Bit, B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) .
  eq [044]: addOctet0 (Bcarry:Bit, B-second1:Bit, B-second2:Bit, B-second3:Bit, B-second4:Bit, B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit) = buildOctetSum (Bcarry:Bit, buildOctet (B-second1:Bit, B-second2:Bit, B-second3:Bit, B-second4:Bit, B-second5:Bit, B-second6:Bit, B-second7:Bit, B-second8:Bit)) .
  eq [045]: dropCarryOctetSum (buildOctetSum (Bcarry:Bit, O:Octet)) = O:Octet .
  eq [046]: addOctet (O:Octet, O-prime:Octet) = dropCarryOctetSum (addOctetSum (O:Octet, O-prime:Octet, x0)) .
  eq [047]: addHalfSum (buildHalf (O1:Octet, O2:Octet), buildHalf (O-prime1:Octet, O-prime2:Octet)) = addHalf2 (O1:Octet, O-prime1:Octet, O2:Octet, O-prime2:Octet) .
  eq [048]: addHalf2 (O1:Octet, O-prime1:Octet, O2:Octet, O-prime2:Octet) = addHalf1 (O1:Octet, O-prime1:Octet, addOctetSum (O2:Octet, O-prime2:Octet, x0)) .
  eq [049]: addHalf1 (O1:Octet, O-prime1:Octet, buildOctetSum (B:Bit, O-second2:Octet)) = addHalf0 (addOctetSum (O1:Octet, O-prime1:Octet, B:Bit), O-second2:Octet) .
  eq [050]: addHalf0 (buildOctetSum (B:Bit, O-second1:Octet), O-second2:Octet) = buildHalfSum (B:Bit, buildHalf (O-second1:Octet, O-second2:Octet)) .
  eq [051]: dropCarryHalfSum (buildHalfSum (B:Bit, H:Half)) = H:Half .
  eq [052]: addHalf (H:Half, H-prime:Half) = dropCarryHalfSum (addHalfSum (H:Half, H-prime:Half)) .
  eq [053]: addHalfOctet (O:Octet, H:Half) = addHalf (buildHalf (x00, O:Octet), H:Half) .
  eq [054]: addHalfOctets (O:Octet, O-prime:Octet) = addHalf (buildHalf (x00, O:Octet), buildHalf (x00, O-prime:Octet)) .
  eq [055]: addBlockSum (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet), buildBlock (O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet)) = addBlock4 (O1:Octet, O-prime1:Octet, O2:Octet, O-prime2:Octet, O3:Octet, O-prime3:Octet, O4:Octet, O-prime4:Octet) .
  eq [056]: addBlock4 (O1:Octet, O-prime1:Octet, O2:Octet, O-prime2:Octet, O3:Octet, O-prime3:Octet, O4:Octet, O-prime4:Octet) = addBlock3 (O1:Octet, O-prime1:Octet, O2:Octet, O-prime2:Octet, O3:Octet, O-prime3:Octet, addOctetSum (O4:Octet, O-prime4:Octet, x0)) .
  eq [057]: addBlock3 (O1:Octet, O-prime1:Octet, O2:Octet, O-prime2:Octet, O3:Octet, O-prime3:Octet, buildOctetSum (Bcarry:Bit, O-second4:Octet)) = addBlock2 (O1:Octet, O-prime1:Octet, O2:Octet, O-prime2:Octet, addOctetSum (O3:Octet, O-prime3:Octet, Bcarry:Bit), O-second4:Octet) .
  eq [058]: addBlock2 (O1:Octet, O-prime1:Octet, O2:Octet, O-prime2:Octet, buildOctetSum (Bcarry:Bit, O-second3:Octet), O-second4:Octet) = addBlock1 (O1:Octet, O-prime1:Octet, addOctetSum (O2:Octet, O-prime2:Octet, Bcarry:Bit), O-second3:Octet, O-second4:Octet) .
  eq [059]: addBlock1 (O1:Octet, O-prime1:Octet, buildOctetSum (Bcarry:Bit, O-second2:Octet), O-second3:Octet, O-second4:Octet) = addBlock0 (addOctetSum (O1:Octet, O-prime1:Octet, Bcarry:Bit), O-second2:Octet, O-second3:Octet, O-second4:Octet) .
  eq [060]: addBlock0 (buildOctetSum (Bcarry:Bit, O-second1:Octet), O-second2:Octet, O-second3:Octet, O-second4:Octet) = buildBlockSum (Bcarry:Bit, buildBlock (O-second1:Octet, O-second2:Octet, O-second3:Octet, O-second4:Octet)) .
  eq [061]: dropCarryBlockSum (buildBlockSum (Bcarry:Bit, W:Block)) = W:Block .
  eq [062]: addBlock (W:Block, W-prime:Block) = dropCarryBlockSum (addBlockSum (W:Block, W-prime:Block)) .
  eq [063]: addBlockHalf (buildHalf (O1:Octet, O2:Octet), W:Block) = addBlock (buildBlock (x00, x00, O1:Octet, O2:Octet), W:Block) .
  eq [064]: addBlockHalves (buildHalf (O1:Octet, O2:Octet), buildHalf (O-prime1:Octet, O-prime2:Octet)) = addBlock (buildBlock (x00, x00, O1:Octet, O2:Octet), buildBlock (x00, x00, O-prime1:Octet, O-prime2:Octet)) .
  eq [065]: leftOctet1 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, x0) .
  eq [066]: leftOctet2 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, x0, x0) .
  eq [067]: leftOctet3 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, x0, x0, x0) .
  eq [068]: leftOctet4 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (B5:Bit, B6:Bit, B7:Bit, B8:Bit, x0, x0, x0, x0) .
  eq [069]: leftOctet5 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (B6:Bit, B7:Bit, B8:Bit, x0, x0, x0, x0, x0) .
  eq [070]: leftOctet6 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (B7:Bit, B8:Bit, x0, x0, x0, x0, x0, x0) .
  eq [071]: leftOctet7 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (B8:Bit, x0, x0, x0, x0, x0, x0, x0) .
  eq [072]: rightOctet1 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (x0, B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit) .
  eq [073]: rightOctet2 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (x0, x0, B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit) .
  eq [074]: rightOctet3 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (x0, x0, x0, B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit) .
  eq [075]: rightOctet4 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (x0, x0, x0, x0, B1:Bit, B2:Bit, B3:Bit, B4:Bit) .
  eq [076]: rightOctet5 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (x0, x0, x0, x0, x0, B1:Bit, B2:Bit, B3:Bit) .
  eq [077]: rightOctet6 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (x0, x0, x0, x0, x0, x0, B1:Bit, B2:Bit) .
  eq [078]: rightOctet7 (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit)) = buildOctet (x0, x0, x0, x0, x0, x0, x0, B1:Bit) .
  eq [079]: mulOctet (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit), O-prime:Octet) = mulOctet1 (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, x0000) .
  eq [080]: mulOctet1 (x0, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet2 (B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) .
  eq [081]: mulOctet1 (x1, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet2 (B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, mulOctetA (H:Half, rightOctet1 (O-prime:Octet), leftOctet7 (O-prime:Octet))) .
  eq [082]: mulOctet2 (x0, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet3 (B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) .
  eq [083]: mulOctet2 (x1, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet3 (B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, mulOctetA (H:Half, rightOctet2 (O-prime:Octet), leftOctet6 (O-prime:Octet))) .
  eq [084]: mulOctet3 (x0, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet4 (B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) .
  eq [085]: mulOctet3 (x1, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet4 (B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, mulOctetA (H:Half, rightOctet3 (O-prime:Octet), leftOctet5 (O-prime:Octet))) .
  eq [086]: mulOctet4 (x0, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet5 (B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) .
  eq [087]: mulOctet4 (x1, B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet5 (B5:Bit, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, mulOctetA (H:Half, rightOctet4 (O-prime:Octet), leftOctet4 (O-prime:Octet))) .
  eq [088]: mulOctet5 (x0, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet6 (B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) .
  eq [089]: mulOctet5 (x1, B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet6 (B6:Bit, B7:Bit, B8:Bit, O-prime:Octet, mulOctetA (H:Half, rightOctet5 (O-prime:Octet), leftOctet3 (O-prime:Octet))) .
  eq [090]: mulOctet6 (x0, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet7 (B7:Bit, B8:Bit, O-prime:Octet, H:Half) .
  eq [091]: mulOctet6 (x1, B7:Bit, B8:Bit, O-prime:Octet, H:Half) = mulOctet7 (B7:Bit, B8:Bit, O-prime:Octet, mulOctetA (H:Half, rightOctet6 (O-prime:Octet), leftOctet2 (O-prime:Octet))) .
  eq [092]: mulOctet7 (x0, B8:Bit, O-prime:Octet, H:Half) = mulOctet8 (B8:Bit, O-prime:Octet, H:Half) .
  eq [093]: mulOctet7 (x1, B8:Bit, O-prime:Octet, H:Half) = mulOctet8 (B8:Bit, O-prime:Octet, mulOctetA (H:Half, rightOctet7 (O-prime:Octet), leftOctet1 (O-prime:Octet))) .
  eq [094]: mulOctet8 (x0, O-prime:Octet, H:Half) = H:Half .
  eq [095]: mulOctet8 (x1, O-prime:Octet, H:Half) = mulOctetA (H:Half, x00, O-prime:Octet) .
  eq [096]: mulOctetA (buildHalf (O1:Octet, O2:Octet), O-prime1:Octet, O-prime2:Octet) = mulOctetB (addOctet (O1:Octet, O-prime1:Octet), addOctetSum (O2:Octet, O-prime2:Octet, x0)) .
  eq [097]: mulOctetB (O1:Octet, buildOctetSum (x0, O2:Octet)) = buildHalf (O1:Octet, O2:Octet) .
  eq [098]: mulOctetB (O1:Octet, buildOctetSum (x1, O2:Octet)) = buildHalf (addOctet (O1:Octet, x01), O2:Octet) .
  eq [099]: mulHalf (buildHalf (O1:Octet, O2:Octet), buildHalf (O-prime1:Octet, O-prime2:Octet)) = mulHalfA (mulOctet (O1:Octet, O-prime1:Octet), mulOctet (O1:Octet, O-prime2:Octet), mulOctet (O2:Octet, O-prime1:Octet), mulOctet (O2:Octet, O-prime2:Octet)) .
  eq [100]: mulHalfA (buildHalf (O11U:Octet, O11L:Octet), buildHalf (O12U:Octet, O12L:Octet), buildHalf (O21U:Octet, O21L:Octet), buildHalf (O22U:Octet, O22L:Octet)) = mulHalf4 (O11U:Octet, O11L:Octet, O12U:Octet, O12L:Octet, O21U:Octet, O21L:Octet, O22U:Octet, O22L:Octet) .
  eq [101]: mulHalf4 (O11U:Octet, O11L:Octet, O12U:Octet, O12L:Octet, O21U:Octet, O21L:Octet, O22U:Octet, O-second4:Octet) = mulHalf3 (O11U:Octet, O11L:Octet, O12U:Octet, O21U:Octet, addHalfOctet (O12L:Octet, addHalfOctets (O21L:Octet, O22U:Octet)), O-second4:Octet) .
  eq [102]: mulHalf3 (O11U:Octet, O11L:Octet, O12U:Octet, O21U:Octet, buildHalf (Ocarry:Octet, O-second3:Octet), O-second4:Octet) = mulHalf2 (O11U:Octet, addHalfOctet (Ocarry:Octet, addHalfOctet (O11L:Octet, addHalfOctets (O12U:Octet, O21U:Octet))), O-second3:Octet, O-second4:Octet) .
  eq [103]: mulHalf2 (O11U:Octet, buildHalf (Ocarry:Octet, O-second2:Octet), O-second3:Octet, O-second4:Octet) = mulHalf1 (addHalfOctets (Ocarry:Octet, O11U:Octet), O-second2:Octet, O-second3:Octet, O-second4:Octet) .
  eq [104]: mulHalf1 (buildHalf (Ocarry:Octet, O-second1:Octet), O-second2:Octet, O-second3:Octet, O-second4:Octet) = buildBlock (O-second1:Octet, O-second2:Octet, O-second3:Octet, O-second4:Octet) .
  eq [105]: mulBlock (W1:Block, W2:Block) = mulBlockA (mulHalf (HalfU (W1:Block), HalfU (W2:Block)), mulHalf (HalfU (W1:Block), HalfL (W2:Block)), mulHalf (HalfL (W1:Block), HalfU (W2:Block)), mulHalf (HalfL (W1:Block), HalfL (W2:Block))) .
  eq [106]: mulBlockA (W11:Block, W12:Block, W21:Block, W22:Block) = mulBlock4 (HalfU (W11:Block), HalfL (W11:Block), HalfU (W12:Block), HalfL (W12:Block), HalfU (W21:Block), HalfL (W21:Block), HalfU (W22:Block), HalfL (W22:Block)) .
  eq [107]: mulBlock4 (H11U:Half, H11L:Half, H12U:Half, H12L:Half, H21U:Half, H21L:Half, H22U:Half, H-second4:Half) = mulBlock3 (H11U:Half, H11L:Half, H12U:Half, H21U:Half, addBlockHalf (H12L:Half, addBlockHalves (H21L:Half, H22U:Half)), H-second4:Half) .
  eq [108]: mulBlock3 (H11U:Half, H11L:Half, H12U:Half, H21U:Half, W:Block, H-second4:Half) = mulBlock2 (H11U:Half, addBlockHalf (HalfU (W:Block), addBlockHalf (H11L:Half, addBlockHalves (H12U:Half, H21U:Half))), HalfL (W:Block), H-second4:Half) .
  eq [109]: mulBlock2 (H11U:Half, W:Block, H-second3:Half, H-second4:Half) = mulBlock1 (addBlockHalves (HalfU (W:Block), H11U:Half), HalfL (W:Block), H-second3:Half, H-second4:Half) .
  eq [110]: mulBlock1 (W:Block, H-second2:Half, H-second3:Half, H-second4:Half) = mulBlockB (HalfL (W:Block), H-second2:Half, H-second3:Half, H-second4:Half) .
  eq [111]: mulBlockB (buildHalf (O1U:Octet, O1L:Octet), buildHalf (O2U:Octet, O2L:Octet), buildHalf (O3U:Octet, O3L:Octet), buildHalf (O4U:Octet, O4L:Octet)) = buildPair (buildBlock (O1U:Octet, O1L:Octet, O2U:Octet, O2L:Octet), buildBlock (O3U:Octet, O3L:Octet, O4U:Octet, O4L:Octet)) .
  eq [112]: addNat (N:Nat, zero) = N:Nat .
  eq [113]: addNat (N:Nat, succ (N-prime:Nat)) = addNat (succ (N:Nat), N-prime:Nat) .
  eq [114]: multNat (N:Nat, zero) = zero .
  eq [115]: multNat (N:Nat, succ (N-prime:Nat)) = addNat (N:Nat, multNat (N:Nat, N-prime:Nat)) .
  eq [116]: eqNat (zero, zero) = Xtrue .
  eq [117]: eqNat (zero, succ (N-prime:Nat)) = Xfalse .
  eq [118]: eqNat (succ (N:Nat), zero) = Xfalse .
  eq [119]: eqNat (succ (N:Nat), succ (N-prime:Nat)) = eqNat (N:Nat, N-prime:Nat) .
  eq [120]: ltNat (zero, zero) = Xfalse .
  eq [121]: ltNat (zero, succ (N-prime:Nat)) = Xtrue .
  eq [122]: ltNat (succ (N-prime:Nat), zero) = Xfalse .
  eq [123]: ltNat (succ (N:Nat), succ (N-prime:Nat)) = ltNat (N:Nat, N-prime:Nat) .
  eq [124]: n1 = succ (zero) .
  eq [125]: n2 = succ (n1) .
  eq [126]: n3 = succ (n2) .
  eq [127]: n4 = succ (n3) .
  eq [128]: n5 = succ (n4) .
  eq [129]: n6 = succ (n5) .
  eq [130]: n7 = succ (n6) .
  eq [131]: n8 = succ (n7) .
  eq [132]: n9 = succ (n8) .
  eq [133]: n10 = succ (n9) .
  eq [134]: n11 = succ (n10) .
  eq [135]: n12 = succ (n11) .
  eq [136]: n13 = succ (n12) .
  eq [137]: n14 = succ (n13) .
  eq [138]: n15 = succ (n14) .
  eq [139]: n16 = succ (n15) .
  eq [140]: n17 = succ (n16) .
  eq [141]: n18 = succ (n17) .
  eq [142]: n19 = succ (n18) .
  eq [143]: n20 = succ (n19) .
  eq [144]: n21 = succ (n20) .
  eq [145]: n22 = succ (n21) .
  eq [146]: n254 = addNat (n12, multNat (n11, n22)) .
  eq [147]: n256 = multNat (n16, n16) .
  eq [148]: n4100 = addNat (n4, multNat (n16, n256)) .
  eq [149]: andOctet (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit), buildOctet (B-prime1:Bit, B-prime2:Bit, B-prime3:Bit, B-prime4:Bit, B-prime5:Bit, B-prime6:Bit, B-prime7:Bit, B-prime8:Bit)) = buildOctet (andBit (B1:Bit, B-prime1:Bit), andBit (B2:Bit, B-prime2:Bit), andBit (B3:Bit, B-prime3:Bit), andBit (B4:Bit, B-prime4:Bit), andBit (B5:Bit, B-prime5:Bit), andBit (B6:Bit, B-prime6:Bit), andBit (B7:Bit, B-prime7:Bit), andBit (B8:Bit, B-prime8:Bit)) .
  eq [150]: orOctet (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit), buildOctet (B-prime1:Bit, B-prime2:Bit, B-prime3:Bit, B-prime4:Bit, B-prime5:Bit, B-prime6:Bit, B-prime7:Bit, B-prime8:Bit)) = buildOctet (orBit (B1:Bit, B-prime1:Bit), orBit (B2:Bit, B-prime2:Bit), orBit (B3:Bit, B-prime3:Bit), orBit (B4:Bit, B-prime4:Bit), orBit (B5:Bit, B-prime5:Bit), orBit (B6:Bit, B-prime6:Bit), orBit (B7:Bit, B-prime7:Bit), orBit (B8:Bit, B-prime8:Bit)) .
  eq [151]: xorOctet (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit), buildOctet (B-prime1:Bit, B-prime2:Bit, B-prime3:Bit, B-prime4:Bit, B-prime5:Bit, B-prime6:Bit, B-prime7:Bit, B-prime8:Bit)) = buildOctet (xorBit (B1:Bit, B-prime1:Bit), xorBit (B2:Bit, B-prime2:Bit), xorBit (B3:Bit, B-prime3:Bit), xorBit (B4:Bit, B-prime4:Bit), xorBit (B5:Bit, B-prime5:Bit), xorBit (B6:Bit, B-prime6:Bit), xorBit (B7:Bit, B-prime7:Bit), xorBit (B8:Bit, B-prime8:Bit)) .
  eq [152]: x02 = buildOctet (x0, x0, x0, x0, x0, x0, x1, x0) .
  eq [153]: x03 = buildOctet (x0, x0, x0, x0, x0, x0, x1, x1) .
  eq [154]: x04 = buildOctet (x0, x0, x0, x0, x0, x1, x0, x0) .
  eq [155]: x05 = buildOctet (x0, x0, x0, x0, x0, x1, x0, x1) .
  eq [156]: x06 = buildOctet (x0, x0, x0, x0, x0, x1, x1, x0) .
  eq [157]: x07 = buildOctet (x0, x0, x0, x0, x0, x1, x1, x1) .
  eq [158]: x08 = buildOctet (x0, x0, x0, x0, x1, x0, x0, x0) .
  eq [159]: x09 = buildOctet (x0, x0, x0, x0, x1, x0, x0, x1) .
  eq [160]: x0A = buildOctet (x0, x0, x0, x0, x1, x0, x1, x0) .
  eq [161]: x0B = buildOctet (x0, x0, x0, x0, x1, x0, x1, x1) .
  eq [162]: x0C = buildOctet (x0, x0, x0, x0, x1, x1, x0, x0) .
  eq [163]: x0D = buildOctet (x0, x0, x0, x0, x1, x1, x0, x1) .
  eq [164]: x0E = buildOctet (x0, x0, x0, x0, x1, x1, x1, x0) .
  eq [165]: x0F = buildOctet (x0, x0, x0, x0, x1, x1, x1, x1) .
  eq [166]: x10 = buildOctet (x0, x0, x0, x1, x0, x0, x0, x0) .
  eq [167]: x11 = buildOctet (x0, x0, x0, x1, x0, x0, x0, x1) .
  eq [168]: x12 = buildOctet (x0, x0, x0, x1, x0, x0, x1, x0) .
  eq [169]: x13 = buildOctet (x0, x0, x0, x1, x0, x0, x1, x1) .
  eq [170]: x14 = buildOctet (x0, x0, x0, x1, x0, x1, x0, x0) .
  eq [171]: x15 = buildOctet (x0, x0, x0, x1, x0, x1, x0, x1) .
  eq [172]: x16 = buildOctet (x0, x0, x0, x1, x0, x1, x1, x0) .
  eq [173]: x17 = buildOctet (x0, x0, x0, x1, x0, x1, x1, x1) .
  eq [174]: x18 = buildOctet (x0, x0, x0, x1, x1, x0, x0, x0) .
  eq [175]: x1A = buildOctet (x0, x0, x0, x1, x1, x0, x1, x0) .
  eq [176]: x1B = buildOctet (x0, x0, x0, x1, x1, x0, x1, x1) .
  eq [177]: x1C = buildOctet (x0, x0, x0, x1, x1, x1, x0, x0) .
  eq [178]: x1D = buildOctet (x0, x0, x0, x1, x1, x1, x0, x1) .
  eq [179]: x1E = buildOctet (x0, x0, x0, x1, x1, x1, x1, x0) .
  eq [180]: x1F = buildOctet (x0, x0, x0, x1, x1, x1, x1, x1) .
  eq [181]: x20 = buildOctet (x0, x0, x1, x0, x0, x0, x0, x0) .
  eq [182]: x21 = buildOctet (x0, x0, x1, x0, x0, x0, x0, x1) .
  eq [183]: x23 = buildOctet (x0, x0, x1, x0, x0, x0, x1, x1) .
  eq [184]: x24 = buildOctet (x0, x0, x1, x0, x0, x1, x0, x0) .
  eq [185]: x25 = buildOctet (x0, x0, x1, x0, x0, x1, x0, x1) .
  eq [186]: x26 = buildOctet (x0, x0, x1, x0, x0, x1, x1, x0) .
  eq [187]: x27 = buildOctet (x0, x0, x1, x0, x0, x1, x1, x1) .
  eq [188]: x28 = buildOctet (x0, x0, x1, x0, x1, x0, x0, x0) .
  eq [189]: x29 = buildOctet (x0, x0, x1, x0, x1, x0, x0, x1) .
  eq [190]: x2A = buildOctet (x0, x0, x1, x0, x1, x0, x1, x0) .
  eq [191]: x2B = buildOctet (x0, x0, x1, x0, x1, x0, x1, x1) .
  eq [192]: x2D = buildOctet (x0, x0, x1, x0, x1, x1, x0, x1) .
  eq [193]: x2E = buildOctet (x0, x0, x1, x0, x1, x1, x1, x0) .
  eq [194]: x2F = buildOctet (x0, x0, x1, x0, x1, x1, x1, x1) .
  eq [195]: x30 = buildOctet (x0, x0, x1, x1, x0, x0, x0, x0) .
  eq [196]: x31 = buildOctet (x0, x0, x1, x1, x0, x0, x0, x1) .
  eq [197]: x32 = buildOctet (x0, x0, x1, x1, x0, x0, x1, x0) .
  eq [198]: x33 = buildOctet (x0, x0, x1, x1, x0, x0, x1, x1) .
  eq [199]: x34 = buildOctet (x0, x0, x1, x1, x0, x1, x0, x0) .
  eq [200]: x35 = buildOctet (x0, x0, x1, x1, x0, x1, x0, x1) .
  eq [201]: x36 = buildOctet (x0, x0, x1, x1, x0, x1, x1, x0) .
  eq [202]: x37 = buildOctet (x0, x0, x1, x1, x0, x1, x1, x1) .
  eq [203]: x38 = buildOctet (x0, x0, x1, x1, x1, x0, x0, x0) .
  eq [204]: x39 = buildOctet (x0, x0, x1, x1, x1, x0, x0, x1) .
  eq [205]: x3A = buildOctet (x0, x0, x1, x1, x1, x0, x1, x0) .
  eq [206]: x3B = buildOctet (x0, x0, x1, x1, x1, x0, x1, x1) .
  eq [207]: x3D = buildOctet (x0, x0, x1, x1, x1, x1, x0, x1) .
  eq [208]: x3C = buildOctet (x0, x0, x1, x1, x1, x1, x0, x0) .
  eq [209]: x3F = buildOctet (x0, x0, x1, x1, x1, x1, x1, x1) .
  eq [210]: x40 = buildOctet (x0, x1, x0, x0, x0, x0, x0, x0) .
  eq [211]: x46 = buildOctet (x0, x1, x0, x0, x0, x1, x1, x0) .
  eq [212]: x48 = buildOctet (x0, x1, x0, x0, x1, x0, x0, x0) .
  eq [213]: x49 = buildOctet (x0, x1, x0, x0, x1, x0, x0, x1) .
  eq [214]: x4A = buildOctet (x0, x1, x0, x0, x1, x0, x1, x0) .
  eq [215]: x4B = buildOctet (x0, x1, x0, x0, x1, x0, x1, x1) .
  eq [216]: x4C = buildOctet (x0, x1, x0, x0, x1, x1, x0, x0) .
  eq [217]: x4D = buildOctet (x0, x1, x0, x0, x1, x1, x0, x1) .
  eq [218]: x4E = buildOctet (x0, x1, x0, x0, x1, x1, x1, x0) .
  eq [219]: x4F = buildOctet (x0, x1, x0, x0, x1, x1, x1, x1) .
  eq [220]: x50 = buildOctet (x0, x1, x0, x1, x0, x0, x0, x0) .
  eq [221]: x51 = buildOctet (x0, x1, x0, x1, x0, x0, x0, x1) .
  eq [222]: x53 = buildOctet (x0, x1, x0, x1, x0, x0, x1, x1) .
  eq [223]: x54 = buildOctet (x0, x1, x0, x1, x0, x1, x0, x0) .
  eq [224]: x55 = buildOctet (x0, x1, x0, x1, x0, x1, x0, x1) .
  eq [225]: x58 = buildOctet (x0, x1, x0, x1, x1, x0, x0, x0) .
  eq [226]: x5A = buildOctet (x0, x1, x0, x1, x1, x0, x1, x0) .
  eq [227]: x5B = buildOctet (x0, x1, x0, x1, x1, x0, x1, x1) .
  eq [228]: x5C = buildOctet (x0, x1, x0, x1, x1, x1, x0, x0) .
  eq [229]: x5D = buildOctet (x0, x1, x0, x1, x1, x1, x0, x1) .
  eq [230]: x5E = buildOctet (x0, x1, x0, x1, x1, x1, x1, x0) .
  eq [231]: x5F = buildOctet (x0, x1, x0, x1, x1, x1, x1, x1) .
  eq [232]: x60 = buildOctet (x0, x1, x1, x0, x0, x0, x0, x0) .
  eq [233]: x61 = buildOctet (x0, x1, x1, x0, x0, x0, x0, x1) .
  eq [234]: x62 = buildOctet (x0, x1, x1, x0, x0, x0, x1, x0) .
  eq [235]: x63 = buildOctet (x0, x1, x1, x0, x0, x0, x1, x1) .
  eq [236]: x64 = buildOctet (x0, x1, x1, x0, x0, x1, x0, x0) .
  eq [237]: x65 = buildOctet (x0, x1, x1, x0, x0, x1, x0, x1) .
  eq [238]: x66 = buildOctet (x0, x1, x1, x0, x0, x1, x1, x0) .
  eq [239]: x67 = buildOctet (x0, x1, x1, x0, x0, x1, x1, x1) .
  eq [240]: x69 = buildOctet (x0, x1, x1, x0, x1, x0, x0, x1) .
  eq [241]: x6A = buildOctet (x0, x1, x1, x0, x1, x0, x1, x0) .
  eq [242]: x6B = buildOctet (x0, x1, x1, x0, x1, x0, x1, x1) .
  eq [243]: x6C = buildOctet (x0, x1, x1, x0, x1, x1, x0, x0) .
  eq [244]: x6D = buildOctet (x0, x1, x1, x0, x1, x1, x0, x1) .
  eq [245]: x6E = buildOctet (x0, x1, x1, x0, x1, x1, x1, x0) .
  eq [246]: x6F = buildOctet (x0, x1, x1, x0, x1, x1, x1, x1) .
  eq [247]: x70 = buildOctet (x0, x1, x1, x1, x0, x0, x0, x0) .
  eq [248]: x71 = buildOctet (x0, x1, x1, x1, x0, x0, x0, x1) .
  eq [249]: x72 = buildOctet (x0, x1, x1, x1, x0, x0, x1, x0) .
  eq [250]: x73 = buildOctet (x0, x1, x1, x1, x0, x0, x1, x1) .
  eq [251]: x74 = buildOctet (x0, x1, x1, x1, x0, x1, x0, x0) .
  eq [252]: x75 = buildOctet (x0, x1, x1, x1, x0, x1, x0, x1) .
  eq [253]: x76 = buildOctet (x0, x1, x1, x1, x0, x1, x1, x0) .
  eq [254]: x77 = buildOctet (x0, x1, x1, x1, x0, x1, x1, x1) .
  eq [255]: x78 = buildOctet (x0, x1, x1, x1, x1, x0, x0, x0) .
  eq [256]: x79 = buildOctet (x0, x1, x1, x1, x1, x0, x0, x1) .
  eq [257]: x7A = buildOctet (x0, x1, x1, x1, x1, x0, x1, x0) .
  eq [258]: x7B = buildOctet (x0, x1, x1, x1, x1, x0, x1, x1) .
  eq [259]: x7C = buildOctet (x0, x1, x1, x1, x1, x1, x0, x0) .
  eq [260]: x7D = buildOctet (x0, x1, x1, x1, x1, x1, x0, x1) .
  eq [261]: x7E = buildOctet (x0, x1, x1, x1, x1, x1, x1, x0) .
  eq [262]: x7F = buildOctet (x0, x1, x1, x1, x1, x1, x1, x1) .
  eq [263]: x80 = buildOctet (x1, x0, x0, x0, x0, x0, x0, x0) .
  eq [264]: x81 = buildOctet (x1, x0, x0, x0, x0, x0, x0, x1) .
  eq [265]: x83 = buildOctet (x1, x0, x0, x0, x0, x0, x1, x1) .
  eq [266]: x84 = buildOctet (x1, x0, x0, x0, x0, x1, x0, x0) .
  eq [267]: x85 = buildOctet (x1, x0, x0, x0, x0, x1, x0, x1) .
  eq [268]: x86 = buildOctet (x1, x0, x0, x0, x0, x1, x1, x0) .
  eq [269]: x88 = buildOctet (x1, x0, x0, x0, x1, x0, x0, x0) .
  eq [270]: x89 = buildOctet (x1, x0, x0, x0, x1, x0, x0, x1) .
  eq [271]: x8A = buildOctet (x1, x0, x0, x0, x1, x0, x1, x0) .
  eq [272]: x8C = buildOctet (x1, x0, x0, x0, x1, x1, x0, x0) .
  eq [273]: x8D = buildOctet (x1, x0, x0, x0, x1, x1, x0, x1) .
  eq [274]: x8E = buildOctet (x1, x0, x0, x0, x1, x1, x1, x0) .
  eq [275]: x8F = buildOctet (x1, x0, x0, x0, x1, x1, x1, x1) .
  eq [276]: x90 = buildOctet (x1, x0, x0, x1, x0, x0, x0, x0) .
  eq [277]: x91 = buildOctet (x1, x0, x0, x1, x0, x0, x0, x1) .
  eq [278]: x92 = buildOctet (x1, x0, x0, x1, x0, x0, x1, x0) .
  eq [279]: x93 = buildOctet (x1, x0, x0, x1, x0, x0, x1, x1) .
  eq [280]: x95 = buildOctet (x1, x0, x0, x1, x0, x1, x0, x1) .
  eq [281]: x96 = buildOctet (x1, x0, x0, x1, x0, x1, x1, x0) .
  eq [282]: x97 = buildOctet (x1, x0, x0, x1, x0, x1, x1, x1) .
  eq [283]: x98 = buildOctet (x1, x0, x0, x1, x1, x0, x0, x0) .
  eq [284]: x99 = buildOctet (x1, x0, x0, x1, x1, x0, x0, x1) .
  eq [285]: x9A = buildOctet (x1, x0, x0, x1, x1, x0, x1, x0) .
  eq [286]: x9B = buildOctet (x1, x0, x0, x1, x1, x0, x1, x1) .
  eq [287]: x9C = buildOctet (x1, x0, x0, x1, x1, x1, x0, x0) .
  eq [288]: x9D = buildOctet (x1, x0, x0, x1, x1, x1, x0, x1) .
  eq [289]: x9E = buildOctet (x1, x0, x0, x1, x1, x1, x1, x0) .
  eq [290]: x9F = buildOctet (x1, x0, x0, x1, x1, x1, x1, x1) .
  eq [291]: xA1 = buildOctet (x1, x0, x1, x0, x0, x0, x0, x1) .
  eq [292]: xA0 = buildOctet (x1, x0, x1, x0, x0, x0, x0, x0) .
  eq [293]: xA2 = buildOctet (x1, x0, x1, x0, x0, x0, x1, x0) .
  eq [294]: xA3 = buildOctet (x1, x0, x1, x0, x0, x0, x1, x1) .
  eq [295]: xA4 = buildOctet (x1, x0, x1, x0, x0, x1, x0, x0) .
  eq [296]: xA5 = buildOctet (x1, x0, x1, x0, x0, x1, x0, x1) .
  eq [297]: xA6 = buildOctet (x1, x0, x1, x0, x0, x1, x1, x0) .
  eq [298]: xA7 = buildOctet (x1, x0, x1, x0, x0, x1, x1, x1) .
  eq [299]: xA8 = buildOctet (x1, x0, x1, x0, x1, x0, x0, x0) .
  eq [300]: xA9 = buildOctet (x1, x0, x1, x0, x1, x0, x0, x1) .
  eq [301]: xAA = buildOctet (x1, x0, x1, x0, x1, x0, x1, x0) .
  eq [302]: xAB = buildOctet (x1, x0, x1, x0, x1, x0, x1, x1) .
  eq [303]: xAC = buildOctet (x1, x0, x1, x0, x1, x1, x0, x0) .
  eq [304]: xAE = buildOctet (x1, x0, x1, x0, x1, x1, x1, x0) .
  eq [305]: xAF = buildOctet (x1, x0, x1, x0, x1, x1, x1, x1) .
  eq [306]: xB0 = buildOctet (x1, x0, x1, x1, x0, x0, x0, x0) .
  eq [307]: xB1 = buildOctet (x1, x0, x1, x1, x0, x0, x0, x1) .
  eq [308]: xB2 = buildOctet (x1, x0, x1, x1, x0, x0, x1, x0) .
  eq [309]: xB3 = buildOctet (x1, x0, x1, x1, x0, x0, x1, x1) .
  eq [310]: xB5 = buildOctet (x1, x0, x1, x1, x0, x1, x0, x1) .
  eq [311]: xB6 = buildOctet (x1, x0, x1, x1, x0, x1, x1, x0) .
  eq [312]: xB8 = buildOctet (x1, x0, x1, x1, x1, x0, x0, x0) .
  eq [313]: xB9 = buildOctet (x1, x0, x1, x1, x1, x0, x0, x1) .
  eq [314]: xBA = buildOctet (x1, x0, x1, x1, x1, x0, x1, x0) .
  eq [315]: xBB = buildOctet (x1, x0, x1, x1, x1, x0, x1, x1) .
  eq [316]: xBC = buildOctet (x1, x0, x1, x1, x1, x1, x0, x0) .
  eq [317]: xBE = buildOctet (x1, x0, x1, x1, x1, x1, x1, x0) .
  eq [318]: xBF = buildOctet (x1, x0, x1, x1, x1, x1, x1, x1) .
  eq [319]: xC0 = buildOctet (x1, x1, x0, x0, x0, x0, x0, x0) .
  eq [320]: xC1 = buildOctet (x1, x1, x0, x0, x0, x0, x0, x1) .
  eq [321]: xC2 = buildOctet (x1, x1, x0, x0, x0, x0, x1, x0) .
  eq [322]: xC4 = buildOctet (x1, x1, x0, x0, x0, x1, x0, x0) .
  eq [323]: xC5 = buildOctet (x1, x1, x0, x0, x0, x1, x0, x1) .
  eq [324]: xC6 = buildOctet (x1, x1, x0, x0, x0, x1, x1, x0) .
  eq [325]: xC7 = buildOctet (x1, x1, x0, x0, x0, x1, x1, x1) .
  eq [326]: xC8 = buildOctet (x1, x1, x0, x0, x1, x0, x0, x0) .
  eq [327]: xC9 = buildOctet (x1, x1, x0, x0, x1, x0, x0, x1) .
  eq [328]: xCA = buildOctet (x1, x1, x0, x0, x1, x0, x1, x0) .
  eq [329]: xCB = buildOctet (x1, x1, x0, x0, x1, x0, x1, x1) .
  eq [330]: xCC = buildOctet (x1, x1, x0, x0, x1, x1, x0, x0) .
  eq [331]: xCD = buildOctet (x1, x1, x0, x0, x1, x1, x0, x1) .
  eq [332]: xCE = buildOctet (x1, x1, x0, x0, x1, x1, x1, x0) .
  eq [333]: xD0 = buildOctet (x1, x1, x0, x1, x0, x0, x0, x0) .
  eq [334]: xD1 = buildOctet (x1, x1, x0, x1, x0, x0, x0, x1) .
  eq [335]: xD2 = buildOctet (x1, x1, x0, x1, x0, x0, x1, x0) .
  eq [336]: xD3 = buildOctet (x1, x1, x0, x1, x0, x0, x1, x1) .
  eq [337]: xD4 = buildOctet (x1, x1, x0, x1, x0, x1, x0, x0) .
  eq [338]: xD5 = buildOctet (x1, x1, x0, x1, x0, x1, x0, x1) .
  eq [339]: xD6 = buildOctet (x1, x1, x0, x1, x0, x1, x1, x0) .
  eq [340]: xD7 = buildOctet (x1, x1, x0, x1, x0, x1, x1, x1) .
  eq [341]: xD8 = buildOctet (x1, x1, x0, x1, x1, x0, x0, x0) .
  eq [342]: xD9 = buildOctet (x1, x1, x0, x1, x1, x0, x0, x1) .
  eq [343]: xDB = buildOctet (x1, x1, x0, x1, x1, x0, x1, x1) .
  eq [344]: xDC = buildOctet (x1, x1, x0, x1, x1, x1, x0, x0) .
  eq [345]: xDD = buildOctet (x1, x1, x0, x1, x1, x1, x0, x1) .
  eq [346]: xDE = buildOctet (x1, x1, x0, x1, x1, x1, x1, x0) .
  eq [347]: xDF = buildOctet (x1, x1, x0, x1, x1, x1, x1, x1) .
  eq [348]: xE0 = buildOctet (x1, x1, x1, x0, x0, x0, x0, x0) .
  eq [349]: xE1 = buildOctet (x1, x1, x1, x0, x0, x0, x0, x1) .
  eq [350]: xE3 = buildOctet (x1, x1, x1, x0, x0, x0, x1, x1) .
  eq [351]: xE6 = buildOctet (x1, x1, x1, x0, x0, x1, x1, x0) .
  eq [352]: xE8 = buildOctet (x1, x1, x1, x0, x1, x0, x0, x0) .
  eq [353]: xE9 = buildOctet (x1, x1, x1, x0, x1, x0, x0, x1) .
  eq [354]: xEA = buildOctet (x1, x1, x1, x0, x1, x0, x1, x0) .
  eq [355]: xEB = buildOctet (x1, x1, x1, x0, x1, x0, x1, x1) .
  eq [356]: xEC = buildOctet (x1, x1, x1, x0, x1, x1, x0, x0) .
  eq [357]: xED = buildOctet (x1, x1, x1, x0, x1, x1, x0, x1) .
  eq [358]: xEE = buildOctet (x1, x1, x1, x0, x1, x1, x1, x0) .
  eq [359]: xEF = buildOctet (x1, x1, x1, x0, x1, x1, x1, x1) .
  eq [360]: xF0 = buildOctet (x1, x1, x1, x1, x0, x0, x0, x0) .
  eq [361]: xF1 = buildOctet (x1, x1, x1, x1, x0, x0, x0, x1) .
  eq [362]: xF2 = buildOctet (x1, x1, x1, x1, x0, x0, x1, x0) .
  eq [363]: xF3 = buildOctet (x1, x1, x1, x1, x0, x0, x1, x1) .
  eq [364]: xF4 = buildOctet (x1, x1, x1, x1, x0, x1, x0, x0) .
  eq [365]: xF5 = buildOctet (x1, x1, x1, x1, x0, x1, x0, x1) .
  eq [366]: xF6 = buildOctet (x1, x1, x1, x1, x0, x1, x1, x0) .
  eq [367]: xF7 = buildOctet (x1, x1, x1, x1, x0, x1, x1, x1) .
  eq [368]: xF8 = buildOctet (x1, x1, x1, x1, x1, x0, x0, x0) .
  eq [369]: xF9 = buildOctet (x1, x1, x1, x1, x1, x0, x0, x1) .
  eq [370]: xFA = buildOctet (x1, x1, x1, x1, x1, x0, x1, x0) .
  eq [371]: xFB = buildOctet (x1, x1, x1, x1, x1, x0, x1, x1) .
  eq [372]: xFC = buildOctet (x1, x1, x1, x1, x1, x1, x0, x0) .
  eq [373]: xFD = buildOctet (x1, x1, x1, x1, x1, x1, x0, x1) .
  eq [374]: xFE = buildOctet (x1, x1, x1, x1, x1, x1, x1, x0) .
  eq [375]: xFF = buildOctet (x1, x1, x1, x1, x1, x1, x1, x1) .
  eq [376]: andBlock (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet), buildBlock (O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet)) = buildBlock (andOctet (O1:Octet, O-prime1:Octet), andOctet (O2:Octet, O-prime2:Octet), andOctet (O3:Octet, O-prime3:Octet), andOctet (O4:Octet, O-prime4:Octet)) .
  eq [377]: orBlock (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet), buildBlock (O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet)) = buildBlock (orOctet (O1:Octet, O-prime1:Octet), orOctet (O2:Octet, O-prime2:Octet), orOctet (O3:Octet, O-prime3:Octet), orOctet (O4:Octet, O-prime4:Octet)) .
  eq [378]: xorBlock (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet), buildBlock (O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet)) = buildBlock (xorOctet (O1:Octet, O-prime1:Octet), xorOctet (O2:Octet, O-prime2:Octet), xorOctet (O3:Octet, O-prime3:Octet), xorOctet (O4:Octet, O-prime4:Octet)) .
  eq [379]: x0001 = buildHalf (x00, x01) .
  eq [380]: x00000000 = buildBlock (x00, x00, x00, x00) .
  eq [381]: x00000001 = buildBlock (x00, x00, x00, x01) .
  eq [382]: x00000002 = buildBlock (x00, x00, x00, x02) .
  eq [383]: x00000003 = buildBlock (x00, x00, x00, x03) .
  eq [384]: x00000004 = buildBlock (x00, x00, x00, x04) .
  eq [385]: x00000005 = buildBlock (x00, x00, x00, x05) .
  eq [386]: x00000006 = buildBlock (x00, x00, x00, x06) .
  eq [387]: x00000007 = buildBlock (x00, x00, x00, x07) .
  eq [388]: x00000008 = buildBlock (x00, x00, x00, x08) .
  eq [389]: x00000009 = buildBlock (x00, x00, x00, x09) .
  eq [390]: x0000000A = buildBlock (x00, x00, x00, x0A) .
  eq [391]: x0000000B = buildBlock (x00, x00, x00, x0B) .
  eq [392]: x0000000C = buildBlock (x00, x00, x00, x0C) .
  eq [393]: x0000000D = buildBlock (x00, x00, x00, x0D) .
  eq [394]: x0000000E = buildBlock (x00, x00, x00, x0E) .
  eq [395]: x0000000F = buildBlock (x00, x00, x00, x0F) .
  eq [396]: x00000010 = buildBlock (x00, x00, x00, x10) .
  eq [397]: x00000012 = buildBlock (x00, x00, x00, x12) .
  eq [398]: x00000014 = buildBlock (x00, x00, x00, x14) .
  eq [399]: x00000016 = buildBlock (x00, x00, x00, x16) .
  eq [401]: x00000018 = buildBlock (x00, x00, x00, x18) .
  eq [402]: x0000001B = buildBlock (x00, x00, x00, x1B) .
  eq [403]: x0000001D = buildBlock (x00, x00, x00, x1D) .
  eq [404]: x0000001E = buildBlock (x00, x00, x00, x1E) .
  eq [405]: x0000001F = buildBlock (x00, x00, x00, x1F) .
  eq [406]: x00000031 = buildBlock (x00, x00, x00, x31) .
  eq [407]: x00000036 = buildBlock (x00, x00, x00, x36) .
  eq [408]: x00000060 = buildBlock (x00, x00, x00, x60) .
  eq [409]: x00000080 = buildBlock (x00, x00, x00, x80) .
  eq [410]: x000000A5 = buildBlock (x00, x00, x00, xA5) .
  eq [411]: x000000B6 = buildBlock (x00, x00, x00, xB6) .
  eq [412]: x000000C4 = buildBlock (x00, x00, x00, xC4) .
  eq [413]: x000000D2 = buildBlock (x00, x00, x00, xD2) .
  eq [414]: x00000100 = buildBlock (x00, x00, x01, x00) .
  eq [415]: x00000129 = buildBlock (x00, x00, x01, x29) .
  eq [416]: x0000018C = buildBlock (x00, x00, x01, x8C) .
  eq [417]: x00004000 = buildBlock (x00, x00, x40, x00) .
  eq [418]: x00010000 = buildBlock (x00, x01, x00, x00) .
  eq [419]: x00020000 = buildBlock (x00, x02, x00, x00) .
  eq [420]: x00030000 = buildBlock (x00, x03, x00, x00) .
  eq [421]: x00040000 = buildBlock (x00, x04, x00, x00) .
  eq [422]: x00060000 = buildBlock (x00, x06, x00, x00) .
  eq [423]: x00804021 = buildBlock (x00, x80, x40, x21) .
  eq [424]: x00FF00FF = buildBlock (x00, xFF, x00, xFF) .
  eq [425]: x0103050B = buildBlock (x01, x03, x05, x0B) .
  eq [426]: x01030703 = buildBlock (x01, x03, x07, x03) .
  eq [427]: x01030705 = buildBlock (x01, x03, x07, x05) .
  eq [428]: x0103070F = buildBlock (x01, x03, x07, x0F) .
  eq [429]: x02040801 = buildBlock (x02, x04, x08, x01) .
  eq [430]: x0297AF6F = buildBlock (x02, x97, xAF, x6F) .
  eq [431]: x07050301 = buildBlock (x07, x05, x03, x01) .
  eq [432]: x077788A2 = buildBlock (x07, x77, x88, xA2) .
  eq [433]: x07C72EAA = buildBlock (x07, xC7, x2E, xAA) .
  eq [434]: x0A202020 = buildBlock (x0A, x20, x20, x20) .
  eq [435]: x0AD67E20 = buildBlock (x0A, xD6, x7E, x20) .
  eq [436]: x10000000 = buildBlock (x10, x00, x00, x00) .
  eq [437]: x11A9D254 = buildBlock (x11, xA9, xD2, x54) .
  eq [438]: x11AC46B8 = buildBlock (x11, xAC, x46, xB8) .
  eq [439]: x1277A6D4 = buildBlock (x12, x77, xA6, xD4) .
  eq [440]: x13647149 = buildBlock (x13, x64, x71, x49) .
  eq [441]: x160EE9B5 = buildBlock (x16, x0E, xE9, xB5) .
  eq [442]: x17065DBB = buildBlock (x17, x06, x5D, xBB) .
  eq [443]: x17A808FD = buildBlock (x17, xA8, x08, xFD) .
  eq [444]: x1D10D8D3 = buildBlock (x1D, x10, xD8, xD3) .
  eq [445]: x1D3B7760 = buildBlock (x1D, x3B, x77, x60) .
  eq [446]: x1D9C9655 = buildBlock (x1D, x9C, x96, x55) .
  eq [447]: x1F3F7FFF = buildBlock (x1F, x3F, x7F, xFF) .
  eq [448]: x204E80A7 = buildBlock (x20, x4E, x80, xA7) .
  eq [449]: x21D869BA = buildBlock (x21, xD8, x69, xBA) .
  eq [450]: x24B66FB5 = buildBlock (x24, xB6, x6F, xB5) .
  eq [451]: x270EEDAF = buildBlock (x27, x0E, xED, xAF) .
  eq [452]: x277B4B25 = buildBlock (x27, x7B, x4B, x25) .
  eq [453]: x2829040B = buildBlock (x28, x29, x04, x0B) .
  eq [454]: x288FC786 = buildBlock (x28, x8F, xC7, x86) .
  eq [455]: x28EAD8B3 = buildBlock (x28, xEA, xD8, xB3) .
  eq [456]: x29907CD8 = buildBlock (x29, x90, x7C, xD8) .
  eq [457]: x29C1485F = buildBlock (x29, xC1, x48, x5F) .
  eq [458]: x29EEE96B = buildBlock (x29, xEE, xE9, x6B) .
  eq [459]: x2A6091AE = buildBlock (x2A, x60, x91, xAE) .
  eq [460]: x2BF8499A = buildBlock (x2B, xF8, x49, x9A) .
  eq [461]: x2E80AC30 = buildBlock (x2E, x80, xAC, x30) .
  eq [462]: x2FD76FFB = buildBlock (x2F, xD7, x6F, xFB) .
  eq [463]: x30261492 = buildBlock (x30, x26, x14, x92) .
  eq [464]: x303FF4AA = buildBlock (x30, x3F, xF4, xAA) .
  eq [465]: x33D5A466 = buildBlock (x33, xD5, xA4, x66) .
  eq [466]: x344925FC = buildBlock (x34, x49, x25, xFC) .
  eq [467]: x34ACF886 = buildBlock (x34, xAC, xF8, x86) .
  eq [468]: x3CD54DEB = buildBlock (x3C, xD5, x4D, xEB) .
  eq [469]: x3CF3A7D2 = buildBlock (x3C, xF3, xA7, xD2) .
  eq [470]: x3DD81AC6 = buildBlock (x3D, xD8, x1A, xC6) .
  eq [471]: x3F6F7248 = buildBlock (x3F, x6F, x72, x48) .
  eq [472]: x48B204D6 = buildBlock (x48, xB2, x04, xD6) .
  eq [473]: x4A645A01 = buildBlock (x4A, x64, x5A, x01) .
  eq [474]: x4C49AAE0 = buildBlock (x4C, x49, xAA, xE0) .
  eq [475]: x4CE933E1 = buildBlock (x4C, xE9, x33, xE1) .
  eq [476]: x4D53901A = buildBlock (x4D, x53, x90, x1A) .
  eq [477]: x4DA124A1 = buildBlock (x4D, xA1, x24, xA1) .
  eq [478]: x4F998E01 = buildBlock (x4F, x99, x8E, x01) .
  eq [479]: x4FB1138A = buildBlock (x4F, xB1, x13, x8A) .
  eq [480]: x50DEC930 = buildBlock (x50, xDE, xC9, x30) .
  eq [481]: x51AF3C1D = buildBlock (x51, xAF, x3C, x1D) .
  eq [482]: x51EDE9C7 = buildBlock (x51, xED, xE9, xC7) .
  eq [483]: x550D91CE = buildBlock (x55, x0D, x91, xCE) .
  eq [484]: x55555555 = buildBlock (x55, x55, x55, x55) .
  eq [485]: x55DD063F = buildBlock (x55, xDD, x06, x3F) .
  eq [486]: x5834A585 = buildBlock (x58, x34, xA5, x85) .
  eq [487]: x5A35D667 = buildBlock (x5A, x35, xD6, x67) .
  eq [488]: x5BC02502 = buildBlock (x5B, xC0, x25, x02) .
  eq [489]: x5CCA3239 = buildBlock (x5C, xCA, x32, x39) .
  eq [490]: x5EBA06C2 = buildBlock (x5E, xBA, x06, xC2) .
  eq [491]: x5F38EEF1 = buildBlock (x5F, x38, xEE, xF1) .
  eq [492]: x613F8E2A = buildBlock (x61, x3F, x8E, x2A) .
  eq [493]: x63C70DBA = buildBlock (x63, xC7, x0D, xBA) .
  eq [494]: x6AD6E8A4 = buildBlock (x6A, xD6, xE8, xA4) .
  eq [495]: x6AEBACF8 = buildBlock (x6A, xEB, xAC, xF8) .
  eq [496]: x6D67E884 = buildBlock (x6D, x67, xE8, x84) .
  eq [497]: x7050EC5E = buildBlock (x70, x50, xEC, x5E) .
  eq [498]: x717153D5 = buildBlock (x71, x71, x53, xD5) .
  eq [499]: x7201F4DC = buildBlock (x72, x01, xF4, xDC) .
  eq [500]: x7397C9AE = buildBlock (x73, x97, xC9, xAE) .
  eq [501]: x74B39176 = buildBlock (x74, xB3, x91, x76) .
  eq [502]: x76232E5F = buildBlock (x76, x23, x2E, x5F) .
  eq [503]: x7783C51D = buildBlock (x77, x83, xC5, x1D) .
  eq [504]: x7792F9D4 = buildBlock (x77, x92, xF9, xD4) .
  eq [505]: x7BC180AB = buildBlock (x7B, xC1, x80, xAB) .
  eq [506]: x7DB2D9F4 = buildBlock (x7D, xB2, xD9, xF4) .
  eq [507]: x7DFEFBFF = buildBlock (x7D, xFE, xFB, xFF) .
  eq [508]: x7F76A3B0 = buildBlock (x7F, x76, xA3, xB0) .
  eq [509]: x7F839576 = buildBlock (x7F, x83, x95, x76) .
  eq [510]: x7FFFFFF0 = buildBlock (x7F, xFF, xFF, xF0) .
  eq [511]: x7FFFFFF1 = buildBlock (x7F, xFF, xFF, xF1) .
  eq [512]: x7FFFFFFC = buildBlock (x7F, xFF, xFF, xFC) .
  eq [513]: x7FFFFFFD = buildBlock (x7F, xFF, xFF, xFD) .
  eq [514]: x80000000 = buildBlock (x80, x00, x00, x00) .
  eq [515]: x80000002 = buildBlock (x80, x00, x00, x02) .
  eq [516]: x800000C2 = buildBlock (x80, x00, x00, xC2) .
  eq [517]: x80018000 = buildBlock (x80, x01, x80, x00) .
  eq [518]: x80018001 = buildBlock (x80, x01, x80, x01) .
  eq [519]: x80397302 = buildBlock (x80, x39, x73, x02) .
  eq [520]: x81D10CA3 = buildBlock (x81, xD1, x0C, xA3) .
  eq [521]: x89D635D7 = buildBlock (x89, xD6, x35, xD7) .
  eq [522]: x8CE37709 = buildBlock (x8C, xE3, x77, x09) .
  eq [523]: x8DC8BBDE = buildBlock (x8D, xC8, xBB, xDE) .
  eq [524]: x9115A558 = buildBlock (x91, x15, xA5, x58) .
  eq [525]: x91896CFA = buildBlock (x91, x89, x6C, xFA) .
  eq [526]: x9372CDC6 = buildBlock (x93, x72, xCD, xC6) .
  eq [527]: x98D1CC75 = buildBlock (x98, xD1, xCC, x75) .
  eq [528]: x9D15C437 = buildBlock (x9D, x15, xC4, x37) .
  eq [529]: x9DB15CF6 = buildBlock (x9D, xB1, x5C, xF6) .
  eq [530]: x9E2E7B36 = buildBlock (x9E, x2E, x7B, x36) .
  eq [531]: xA018C83B = buildBlock (xA0, x18, xC8, x3B) .
  eq [532]: xA0B87B77 = buildBlock (xA0, xB8, x7B, x77) .
  eq [533]: xA44AAAC0 = buildBlock (xA4, x4A, xAA, xC0) .
  eq [534]: xA511987A = buildBlock (xA5, x11, x98, x7A) .
  eq [535]: xA70FC148 = buildBlock (xA7, x0F, xC1, x48) .
  eq [536]: xA93BD410 = buildBlock (xA9, x3B, xD4, x10) .
  eq [537]: xAAAAAAAA = buildBlock (xAA, xAA, xAA, xAA) .
  eq [538]: xAB00FFCD = buildBlock (xAB, x00, xFF, xCD) .
  eq [539]: xAB01FCCD = buildBlock (xAB, x01, xFC, xCD) .
  eq [540]: xAB6EED4A = buildBlock (xAB, x6E, xED, x4A) .
  eq [541]: xABEEED6B = buildBlock (xAB, xEE, xED, x6B) .
  eq [542]: xACBC13DD = buildBlock (xAC, xBC, x13, xDD) .
  eq [543]: xB1CC1CC5 = buildBlock (xB1, xCC, x1C, xC5) .
  eq [544]: xB8142629 = buildBlock (xB8, x14, x26, x29) .
  eq [545]: xB99A62DE = buildBlock (xB9, x9A, x62, xDE) .
  eq [546]: xBA92DB12 = buildBlock (xBA, x92, xDB, x12) .
  eq [547]: xBBA57835 = buildBlock (xBB, xA5, x78, x35) .
  eq [548]: xBE9F0917 = buildBlock (xBE, x9F, x09, x17) .
  eq [549]: xBF2D7D85 = buildBlock (xBF, x2D, x7D, x85) .
  eq [550]:  xBFEF7FDF = buildBlock (xBF, xEF, x7F, xDF) .
  eq [551]: xC1ED90DD = buildBlock (xC1, xED, x90, xDD) .
  eq [552]: xC21A1846 = buildBlock (xC2, x1A, x18, x46) .
  eq [553]: xC4EB1AEB = buildBlock (xC4, xEB, x1A, xEB) .
  eq [554]: xC6B1317E = buildBlock (xC6, xB1, x31, x7E) .
  eq [555]: xCBC865BA = buildBlock (xCB, xC8, x65, xBA) .
  eq [556]: xCD959B46 = buildBlock (xCD, x95, x9B, x46) .
  eq [557]: xD0482465 = buildBlock (xD0, x48, x24, x65) .
  eq [558]: xD636250D = buildBlock (xD6, x36, x25, x0D) .
  eq [559]: xD7843FDC = buildBlock (xD7, x84, x3F, xDC) .
  eq [560]: xD78634BC = buildBlock (xD7, x86, x34, xBC) .
  eq [561]: xD8804CA5 = buildBlock (xD8, x80, x4C, xA5) .
  eq [562]: xDB79FBDC = buildBlock (xDB, x79, xFB, xDC) .
  eq [563]: xDB9102B0 = buildBlock (xDB, x91, x02, xB0) .
  eq [564]: xE0C08000 = buildBlock (xE0, xC0, x80, x00) .
  eq [565]: xE6A12F07 = buildBlock (xE6, xA1, x2F, x07) .
  eq [566]: xEB35B97F = buildBlock (xEB, x35, xB9, x7F) .
  eq [567]: xF0239DD5 = buildBlock (xF0, x23, x9D, xD5) .
  eq [568]: xF14D6E28 = buildBlock (xF1, x4D, x6E, x28) .
  eq [569]: xF2EF3501 = buildBlock (xF2, xEF, x35, x01) .
  eq [570]: xF6A09667 = buildBlock (xF6, xA0, x96, x67) .
  eq [571]: xFD297DA4 = buildBlock (xFD, x29, x7D, xA4) .
  eq [572]: xFDC1A8BA = buildBlock (xFD, xC1, xA8, xBA) .
  eq [573]: xFE4E5BDD = buildBlock (xFE, x4E, x5B, xDD) .
  eq [574]: xFEA1D334 = buildBlock (xFE, xA1, xD3, x34) .
  eq [575]: xFECCAA6E = buildBlock (xFE, xCC, xAA, x6E) .
  eq [576]: xFEFC07F0 = buildBlock (xFE, xFC, x07, xF0) .
  eq [577]: xFF2D7DA5 = buildBlock (xFF, x2D, x7D, xA5) .
  eq [578]: xFFEF0001 = buildBlock (xFF, xEF, x00, x01) .
  eq [579]: xFFFF00FF = buildBlock (xFF, xFF, x00, xFF) .
  eq [580]: xFFFFFF2D = buildBlock (xFF, xFF, xFF, x2D) .
  eq [581]: xFFFFFF3A = buildBlock (xFF, xFF, xFF, x3A) .
  eq [582]: xFFFFFFF0 = buildBlock (xFF, xFF, xFF, xF0) .
  eq [583]: xFFFFFFF1 = buildBlock (xFF, xFF, xFF, xF1) .
  eq [584]: xFFFFFFF4 = buildBlock (xFF, xFF, xFF, xF4) .
  eq [585]: xFFFFFFF5 = buildBlock (xFF, xFF, xFF, xF5) .
  eq [586]: xFFFFFFF7 = buildBlock (xFF, xFF, xFF, xF7) .
  eq [587]: xFFFFFFF9 = buildBlock (xFF, xFF, xFF, xF9) .
  eq [588]: xFFFFFFFA = buildBlock (xFF, xFF, xFF, xFA) .
  eq [589]: xFFFFFFFB = buildBlock (xFF, xFF, xFF, xFB) .
  eq [590]: xFFFFFFFC = buildBlock (xFF, xFF, xFF, xFC) .
  eq [591]: xFFFFFFFD = buildBlock (xFF, xFF, xFF, xFD) .
  eq [592]: xFFFFFFFE = buildBlock (xFF, xFF, xFF, xFE) .
  eq [593]: xFFFFFFFF = buildBlock (xFF, xFF, xFF, xFF) .
  eq [594]: appendMessage (unitMessage (W:Block), W-prime:Block) = consMessage (W:Block, unitMessage (W-prime:Block)) .
  eq [595]: appendMessage (consMessage (W:Block, M:Message), W-prime:Block) = consMessage (W:Block, appendMessage (M:Message, W-prime:Block)) .
  eq [596]: reverseMessage (unitMessage (W:Block)) = unitMessage (W:Block) .
  eq [597]: reverseMessage (consMessage (W:Block, M:Message)) = appendMessage (reverseMessage (M:Message), W:Block) .
 ceq [598]: makeMessage (succ (N:Nat), W:Block, W-prime:Block) = unitMessage (W:Block) if eqNat (N:Nat, zero) = Xtrue .
 ceq [599]: makeMessage (succ (N:Nat), W:Block, W-prime:Block) = consMessage (W:Block, makeMessage (N:Nat, ADD (W:Block, W-prime:Block), W-prime:Block)) if eqNat (N:Nat, zero) = Xfalse .
  eq [600]: ADD (W:Block, W-prime:Block) = addBlock (W:Block, W-prime:Block) .
  eq [601]: AND (W:Block, W-prime:Block) = andBlock (W:Block, W-prime:Block) .
  eq [602]: MUL (W:Block, W-prime:Block) = mulBlock (W:Block, W-prime:Block) .
  eq [603]: OR (W:Block, W-prime:Block) = orBlock (W:Block, W-prime:Block) .
  eq [604]: XOR (W:Block, W-prime:Block) = xorBlock (W:Block, W-prime:Block) .
  eq [605]: XOR-prime (buildPair (W:Block, W-prime:Block)) = XOR (W:Block, W-prime:Block) .
  eq [606]: CYC (buildBlock (buildOctet (B1:Bit, B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit), buildOctet (B9:Bit, B10:Bit, B11:Bit, B12:Bit, B13:Bit, B14:Bit, B15:Bit, B16:Bit), buildOctet (B17:Bit, B18:Bit, B19:Bit, B20:Bit, B21:Bit, B22:Bit, B23:Bit, B24:Bit), buildOctet (B25:Bit, B26:Bit, B27:Bit, B28:Bit, B29:Bit, B30:Bit, B31:Bit, B32:Bit))) = buildBlock (buildOctet (B2:Bit, B3:Bit, B4:Bit, B5:Bit, B6:Bit, B7:Bit, B8:Bit, B9:Bit), buildOctet (B10:Bit, B11:Bit, B12:Bit, B13:Bit, B14:Bit, B15:Bit, B16:Bit, B17:Bit), buildOctet (B18:Bit, B19:Bit, B20:Bit, B21:Bit, B22:Bit, B23:Bit, B24:Bit, B25:Bit), buildOctet (B26:Bit, B27:Bit, B28:Bit, B29:Bit, B30:Bit, B31:Bit, B32:Bit, B1:Bit)) .
  eq [607]: nCYC (zero, W:Block) = W:Block .
  eq [608]: nCYC (succ (N:Nat), W:Block) = CYC (nCYC (N:Nat, W:Block)) .
  eq [609]: FIX1 (W:Block) = AND (OR (W:Block, x02040801), xBFEF7FDF) .
  eq [610]: FIX2 (W:Block) = AND (OR (W:Block, x00804021), x7DFEFBFF) .
  eq [611]: needAdjust (O:Octet) = orBool (eqOctet (O:Octet, x00), eqOctet (O:Octet, xFF)) .
 ceq [612]: adjustCode (O:Octet) = x1 if needAdjust (O:Octet) = Xtrue .
 ceq [613]: adjustCode (O:Octet) = x0 if needAdjust (O:Octet) = Xfalse .
 ceq [614]: adjust (O:Octet, O-prime:Octet) = xorOctet (O:Octet, O-prime:Octet) if needAdjust (O:Octet) = Xtrue .
 ceq [615]: adjust (O:Octet, O-prime:Octet) = O:Octet if needAdjust (O:Octet) = Xfalse .
  eq [616]: PAT (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet), buildBlock (O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet)) = buildOctet (adjustCode (O1:Octet), adjustCode (O2:Octet), adjustCode (O3:Octet), adjustCode (O4:Octet), adjustCode (O-prime1:Octet), adjustCode (O-prime2:Octet), adjustCode (O-prime3:Octet), adjustCode (O-prime4:Octet)) .
  eq [617]: BYT (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet), buildBlock (O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet)) = BYT-prime (O1:Octet, O2:Octet, O3:Octet, O4:Octet, O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet, PAT (buildBlock (O1:Octet, O2:Octet, O3:Octet, O4:Octet), buildBlock (O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet))) .
  eq [618]: BYT-prime (O1:Octet, O2:Octet, O3:Octet, O4:Octet, O-prime1:Octet, O-prime2:Octet, O-prime3:Octet, O-prime4:Octet, Opat:Octet) = buildPair (buildBlock (adjust (O1:Octet, rightOctet7 (Opat:Octet)), adjust (O2:Octet, rightOctet6 (Opat:Octet)), adjust (O3:Octet, rightOctet5 (Opat:Octet)), adjust (O4:Octet, rightOctet4 (Opat:Octet))), buildBlock (adjust (O-prime1:Octet, rightOctet3 (Opat:Octet)), adjust (O-prime2:Octet, rightOctet2 (Opat:Octet)), adjust (O-prime3:Octet, rightOctet1 (Opat:Octet)), adjust (O-prime4:Octet, Opat:Octet))) .
  eq [619]: ADDC (W:Block, W-prime:Block) = ADDC-prime (addBlockSum (W:Block, W-prime:Block)) .
  eq [620]: ADDC-prime (buildBlockSum (x0, W:Block)) = buildPair (x00000000, W:Block) .
  eq [621]: ADDC-prime (buildBlockSum (x1, W:Block)) = buildPair (x00000001, W:Block) .
  eq [622]: MUL1 (W:Block, W-prime:Block) = MUL1XY (MUL (W:Block, W-prime:Block)) .
  eq [623]: MUL1XY (buildPair (W:Block, W-prime:Block)) = MUL1UL (W:Block, W-prime:Block) .
  eq [624]: MUL1UL (W:Block, W-prime:Block) = MUL1SC (ADDC (W:Block, W-prime:Block)) .
  eq [625]: MUL1SC (buildPair (Wcarry:Block, W:Block)) = ADD (W:Block, Wcarry:Block) .
  eq [626]: MUL2 (W:Block, W-prime:Block) = MUL2XY (MUL (W:Block, W-prime:Block)) .
  eq [627]: MUL2XY (buildPair (W:Block, W-prime:Block)) = MUL2UL (W:Block, W-prime:Block) .
  eq [628]: MUL2UL (W:Block, W-prime:Block) = MUL2DEL (ADDC (W:Block, W:Block), W-prime:Block) .
  eq [629]: MUL2DEL (buildPair (Wcarry:Block, W:Block), W-prime:Block) = MUL2FL (ADD (W:Block, ADD (Wcarry:Block, Wcarry:Block)), W-prime:Block) .
  eq [630]: MUL2FL (W:Block, W-prime:Block) = MUL2SC (ADDC (W:Block, W-prime:Block)) .
  eq [631]: MUL2SC (buildPair (Wcarry:Block, W:Block)) = ADD (W:Block, ADD (Wcarry:Block, Wcarry:Block)) .
  eq [632]: MUL2A (W:Block, W-prime:Block) = MUL2AXY (MUL (W:Block, W-prime:Block)) .
  eq [633]: MUL2AXY (buildPair (W:Block, W-prime:Block)) = MUL2AUL (W:Block, W-prime:Block) .
  eq [634]: MUL2AUL (W:Block, W-prime:Block) = MUL2ADL (ADD (W:Block, W:Block), W-prime:Block) .
  eq [635]: MUL2ADL (W:Block, W-prime:Block) = MUL2ASC (ADDC (W:Block, W-prime:Block)) .
  eq [636]: MUL2ASC (buildPair (Wcarry:Block, W:Block)) = ADD (W:Block, ADD (Wcarry:Block, Wcarry:Block)) .
  eq [637]: squareHalf (H:Half) = mulHalf (H:Half, H:Half) .
  eq [638]: Q (O:Octet) = squareHalf (addHalf (buildHalf (x00, O:Octet), x0001)) .
  eq [639]: J1-2 (W:Block) = MUL1 (W:Block, W:Block) .
  eq [640]: J1-4 (W:Block) = MUL1 (J1-2 (W:Block), J1-2 (W:Block)) .
  eq [641]: J1-6 (W:Block) = MUL1 (J1-2 (W:Block), J1-4 (W:Block)) .
  eq [642]: J1-8 (W:Block) = MUL1 (J1-2 (W:Block), J1-6 (W:Block)) .
  eq [643]: J2-2 (W:Block) = MUL2 (W:Block, W:Block) .
  eq [644]: J2-4 (W:Block) = MUL2 (J2-2 (W:Block), J2-2 (W:Block)) .
  eq [645]: J2-6 (W:Block) = MUL2 (J2-2 (W:Block), J2-4 (W:Block)) .
  eq [646]: J2-8 (W:Block) = MUL2 (J2-2 (W:Block), J2-6 (W:Block)) .
  eq [647]: K1-2 (W:Block) = MUL1 (W:Block, W:Block) .
  eq [648]: K1-4 (W:Block) = MUL1 (K1-2 (W:Block), K1-2 (W:Block)) .
  eq [649]: K1-5 (W:Block) = MUL1 (W:Block, K1-4 (W:Block)) .
  eq [650]: K1-7 (W:Block) = MUL1 (K1-2 (W:Block), K1-5 (W:Block)) .
  eq [651]: K1-9 (W:Block) = MUL1 (K1-2 (W:Block), K1-7 (W:Block)) .
  eq [652]: K2-2 (W:Block) = MUL2 (W:Block, W:Block) .
  eq [653]: K2-4 (W:Block) = MUL2 (K2-2 (W:Block), K2-2 (W:Block)) .
  eq [654]: K2-5 (W:Block) = MUL2 (W:Block, K2-4 (W:Block)) .
  eq [655]: K2-7 (W:Block) = MUL2 (K2-2 (W:Block), K2-5 (W:Block)) .
  eq [656]: K2-9 (W:Block) = MUL2 (K2-2 (W:Block), K2-7 (W:Block)) .
  eq [657]: H4 (W:Block) = XOR (J1-4 (W:Block), J2-4 (W:Block)) .
  eq [658]: H6 (W:Block) = XOR (J1-6 (W:Block), J2-6 (W:Block)) .
  eq [659]: H8 (W:Block) = XOR (J1-8 (W:Block), J2-8 (W:Block)) .
  eq [660]: H0 (W:Block) = XOR (K1-5 (W:Block), K2-5 (W:Block)) .
  eq [661]: H5 (W:Block, O:Octet) = MUL2 (H0 (W:Block), Q (O:Octet)) .
  eq [662]: H7 (W:Block) = XOR (K1-7 (W:Block), K2-7 (W:Block)) .
  eq [663]: H9 (W:Block) = XOR (K1-9 (W:Block), K2-9 (W:Block)) .
  eq [664]: splitSegment (unitMessage (W:Block)) = unitSegment (unitMessage (W:Block)) .
  eq [665]: splitSegment (consMessage (W:Block, M:Message)) = cutSegment (M:Message, unitMessage (W:Block), n254) .
  eq [666]: cutSegment (unitMessage (W:Block), M-prime:Message, N:Nat) = unitSegment (reverseMessage (consMessage (W:Block, M-prime:Message))) .
  eq [667]: cutSegment (consMessage (W:Block, M:Message), M-prime:Message, zero) = consSegment (reverseMessage (consMessage (W:Block, M-prime:Message)), splitSegment (M:Message)) .
  eq [668]: cutSegment (consMessage (W:Block, M:Message), M-prime:Message, succ (N:Nat)) = cutSegment (M:Message, consMessage (W:Block, M-prime:Message), N:Nat) .
  eq [669]: preludeXY (W1:Block, W2:Block) = preludeXY-prime (BYT (W1:Block, W2:Block), PAT (W1:Block, W2:Block)) .
  eq [670]: preludeVW (W1:Block, W2:Block) = preludeVW-prime (BYT (W1:Block, W2:Block)) .
  eq [671]: preludeST (W1:Block, W2:Block) = preludeST-prime (BYT (W1:Block, W2:Block)) .
  eq [672]: preludeXY-prime (buildPair (W:Block, W-prime:Block), O:Octet) = BYT (H4 (W:Block), H5 (W-prime:Block, O:Octet)) .
  eq [673]: preludeVW-prime (buildPair (W:Block, W-prime:Block)) = BYT (H6 (W:Block), H7 (W-prime:Block)) .
  eq [674]: preludeST-prime (buildPair (W:Block, W-prime:Block)) = BYT (H8 (W:Block), H9 (W-prime:Block)) .
  eq [675]: computeXY (P:Pair, P-prime:Pair, W:Block) = computeXY-prime (P:Pair, W:Block, XOR-prime (computeVW (P-prime:Pair))) .
  eq [676]: computeXY-prime (buildPair (W1:Block, W2:Block), W:Block, W-prime:Block) = buildPair (MUL1 (XOR (W1:Block, W:Block), FIX1 (ADD (XOR (W2:Block, W:Block), W-prime:Block))), MUL2A (XOR (W2:Block, W:Block), FIX2 (ADD (XOR (W1:Block, W:Block), W-prime:Block)))) .
  eq [677]: computeVW (buildPair (W1:Block, W2:Block)) = buildPair (CYC (W1:Block), W2:Block) .
  eq [678]: loop1 (P:Pair, P-prime:Pair, unitMessage (W:Block)) = computeXY (P:Pair, P-prime:Pair, W:Block) .
  eq [679]: loop1 (P:Pair, P-prime:Pair, consMessage (W:Block, M:Message)) = loop1 (computeXY (P:Pair, P-prime:Pair, W:Block), computeVW (P-prime:Pair), M:Message) .
  eq [680]: loop2 (P:Pair, P-prime:Pair, unitMessage (W:Block)) = computeVW (P-prime:Pair) .
  eq [681]: loop2 (P:Pair, P-prime:Pair, consMessage (W:Block, M:Message)) = loop2 (computeXY (P:Pair, P-prime:Pair, W:Block), computeVW (P-prime:Pair), M:Message) .
  eq [682]: coda (P:Pair, P-prime:Pair, buildPair (W:Block, W-prime:Block)) = XOR-prime (computeXY (computeXY (P:Pair, P-prime:Pair, W:Block), computeVW (P-prime:Pair), W-prime:Block)) .
  eq [683]: MAA (buildKey (W1:Block, W2:Block), M:Message) = MAA-prime (preludeXY (W1:Block, W2:Block), preludeVW (W1:Block, W2:Block), preludeST (W1:Block, W2:Block), M:Message) .
  eq [684]: MAA-prime (P1:Pair, P2:Pair, P3:Pair, M:Message) = coda (loop1 (P1:Pair, P2:Pair, M:Message), loop2 (P1:Pair, P2:Pair, M:Message), P3:Pair) .
  eq [685]: MAC (K:Key, M:Message) = MACfirst (K:Key, splitSegment (M:Message)) .
  eq [686]: MACfirst (K:Key, unitSegment (M:Message)) = MAA (K:Key, M:Message) .
  eq [687]: MACfirst (K:Key, consSegment (M:Message, S:SegmentedMessage)) = MACnext (K:Key, MAA (K:Key, M:Message), S:SegmentedMessage) .
  eq [688]: MACnext (K:Key, W:Block, unitSegment (M:Message)) = MAA (K:Key, consMessage (W:Block, M:Message)) .
  eq [689]: MACnext (K:Key, W:Block, consSegment (M:Message, S:SegmentedMessage)) = MACnext (K:Key, MAA (K:Key, consMessage (W:Block, M:Message)), S:SegmentedMessage) .
endfm
eof
reduce eqBlock (MUL1 (x0000000F, x0000000E), x000000D2) .
reduce eqBlock (MUL1 (xFFFFFFF0, x0000000E), xFFFFFF2D) .
reduce eqBlock (MUL1 (xFFFFFFF0, xFFFFFFF1), x000000D2) .
reduce eqBlock (MUL2 (x0000000F, x0000000E), x000000D2) .
reduce eqBlock (MUL2 (xFFFFFFF0, x0000000E), xFFFFFF3A) .
reduce eqBlock (MUL2 (xFFFFFFF0, xFFFFFFF1), x000000B6) .
reduce eqBlock (MUL2A (x0000000F, x0000000E), x000000D2) .
reduce eqBlock (MUL2A (xFFFFFFF0, x0000000E), xFFFFFF3A) .
reduce eqBlock (MUL2A (x7FFFFFF0, xFFFFFFF1), x800000C2) .
reduce eqBlock (MUL2A (xFFFFFFF0, x7FFFFFF1), x000000C4) .
reduce eqPair (BYT (x00000000, x00000000), buildPair (x0103070F, x1F3F7FFF)) .
reduce eqPair (BYT (xFFFF00FF, xFFFFFFFF), buildPair (xFEFC07F0, xE0C08000)) .
reduce eqPair (BYT (xAB00FFCD, xFFEF0001), buildPair (xAB01FCCD, xF2EF3501)) .
reduce eqOctet (PAT (x00000000, x00000000), xFF) .
reduce eqOctet (PAT (xFFFF00FF, xFFFFFFFF), xFF) .
reduce eqOctet (PAT (xAB00FFCD, xFFEF0001), x6A) .
reduce eqBlock (J1-2 (x00000100), x00010000) .
reduce eqBlock (J1-4 (x00000100), x00000001) .
reduce eqBlock (J1-6 (x00000100), x00010000) .
reduce eqBlock (J1-8 (x00000100), x00000001) .
reduce eqBlock (J2-2 (x00000100), x00010000) .
reduce eqBlock (J2-4 (x00000100), x00000002) .
reduce eqBlock (J2-6 (x00000100), x00020000) .
reduce eqBlock (J2-8 (x00000100), x00000004) .
reduce eqBlock (H4 (x00000100), x00000003) .
reduce eqBlock (H6 (x00000100), x00030000) .
reduce eqBlock (H8 (x00000100), x00000005) .
reduce eqBlock (K1-2 (x00000080), x00004000) .
reduce eqBlock (K1-4 (x00000080), x10000000) .
reduce eqBlock (K1-5 (x00000080), x00000008) .
reduce eqBlock (K1-7 (x00000080), x00020000) .
reduce eqBlock (K1-9 (x00000080), x80000000) .
reduce eqBlock (K2-2 (x00000080), x00004000) .
reduce eqBlock (K2-4 (x00000080), x10000000) .
reduce eqBlock (K2-5 (x00000080), x00000010) .
reduce eqBlock (K2-7 (x00000080), x00040000) .
reduce eqBlock (K2-9 (x00000080), x00000002) .
reduce eqBlock (H0 (x00000080), x00000018) .
reduce eqBlock (Q (x01), x00000004) .
reduce eqBlock (H5 (x00000080, x01), x00000060) .
reduce eqBlock (H7 (x00000080), x00060000) .
reduce eqBlock (H9 (x00000080), x80000002) .
reduce eqOctet (PAT (x00000003, x00000060), xEE) .
reduce eqOctet (PAT (x00030000, x00060000), xBB) .
reduce eqOctet (PAT (x00000005, x80000002), xE6) .
reduce eqPair (BYT (x00000003, x00000060), buildPair (x01030703, x1D3B7760)) .
reduce eqPair (BYT (x00030000, x00060000), buildPair (x0103050B, x17065DBB)) .
reduce eqPair (BYT (x00000005, x80000002), buildPair (x01030705, x80397302)) .
reduce eqBlock (CYC (x00000003), x00000006) .
reduce eqBlock (XOR (x00000006, x00000003), x00000005) .
reduce eqBlock (XOR (x00000002, x00000005), x00000007) .
reduce eqBlock (XOR (x00000003, x00000005), x00000006) .
reduce eqBlock (ADD (x00000005, x00000006), x0000000B) .
reduce eqBlock (ADD (x00000005, x00000007), x0000000C) .
reduce eqBlock (OR (x0000000B, x00000004), x0000000F) .
reduce eqBlock (OR (x0000000C, x00000001), x0000000D) .
reduce eqBlock (AND (x0000000F, xFFFFFFF7), x00000007) .
reduce eqBlock (AND (x0000000D, xFFFFFFFB), x00000009) .
reduce eqBlock (MUL1 (x00000007, x00000007), x00000031) .
reduce eqBlock (MUL2A (x00000006, x00000009), x00000036) .
reduce eqBlock (XOR (x00000031, x00000036), x00000007) .
reduce eqBlock (CYC (x00000003), x00000006) .
reduce eqBlock (XOR (x00000006, x00000003), x00000005) .
reduce eqBlock (XOR (xFFFFFFFD, x00000001), xFFFFFFFC) .
reduce eqBlock (XOR (xFFFFFFFC, x00000001), xFFFFFFFD) .
reduce eqBlock (ADD (x00000005, xFFFFFFFD), x00000002) .
reduce eqBlock (ADD (x00000005, xFFFFFFFC), x00000001) .
reduce eqBlock (OR (x00000002, x00000001), x00000003) .
reduce eqBlock (OR (x00000001, x00000004), x00000005) .
reduce eqBlock (AND (x00000003, xFFFFFFF9), x00000001) .
reduce eqBlock (AND (x00000005, xFFFFFFFC), x00000004) .
reduce eqBlock (MUL1 (xFFFFFFFC, x00000001), xFFFFFFFC) .
reduce eqBlock (MUL2A (xFFFFFFFD, x00000004), xFFFFFFFA) .
reduce eqBlock (XOR (xFFFFFFFC, xFFFFFFFA), x00000006) .
reduce eqBlock (CYC (x00000007), x0000000E) .
reduce eqBlock (XOR (x0000000E, x00000007), x00000009) .
reduce eqBlock (XOR (xFFFFFFFD, x00000008), xFFFFFFF5) .
reduce eqBlock (XOR (xFFFFFFFC, x00000008), xFFFFFFF4) .
reduce eqBlock (ADD (x00000009, xFFFFFFF4), xFFFFFFFD) .
reduce eqBlock (ADD (x00000009, xFFFFFFF5), xFFFFFFFE) .
reduce eqBlock (OR (xFFFFFFFD, x00000001), xFFFFFFFD) .
reduce eqBlock (OR (xFFFFFFFE, x00000002), xFFFFFFFE) .
reduce eqBlock (AND (xFFFFFFFD, xFFFFFFFE), xFFFFFFFC) .
reduce eqBlock (AND (xFFFFFFFE, x7FFFFFFD), x7FFFFFFC) .
reduce eqBlock (MUL1 (xFFFFFFF5, xFFFFFFFC), x0000001E) .
reduce eqBlock (MUL2A (xFFFFFFF4, x7FFFFFFC), x0000001E) .
reduce eqBlock (XOR (x0000001E, x0000001E), x00000000) .
reduce eqBlock (CYC (x00000001), x00000002) .
reduce eqBlock (XOR (x00000002, x00000001), x00000003) .
reduce eqBlock (XOR (x00000001, x00000000), x00000001) .
reduce eqBlock (XOR (x00000002, x00000000), x00000002) .
reduce eqBlock (ADD (x00000003, x00000002), x00000005) .
reduce eqBlock (ADD (x00000003, x00000001), x00000004) .
reduce eqBlock (OR (x00000005, x00000002), x00000007) .
reduce eqBlock (OR (x00000004, x00000001), x00000005) .
reduce eqBlock (AND (x00000007, xFFFFFFFB), x00000003) .
reduce eqBlock (AND (x00000005, xFFFFFFFB), x00000001) .
reduce eqBlock (MUL1 (x00000001, x00000003), x00000003) .
reduce eqBlock (MUL2A (x00000002, x00000001), x00000002) .
reduce eqBlock (XOR (x00000003, x00000002), x00000001) .
reduce eqBlock (CYC (x00000002), x00000004) .
reduce eqBlock (XOR (x00000004, x00000001), x00000005) .
reduce eqBlock (XOR (x00000003, x00000001), x00000002) .
reduce eqBlock (XOR (x00000002, x00000001), x00000003) .
reduce eqBlock (ADD (x00000005, x00000003), x00000008) .
reduce eqBlock (ADD (x00000005, x00000002), x00000007) .
reduce eqBlock (OR (x00000008, x00000002), x0000000A) .
reduce eqBlock (OR (x00000007, x00000001), x00000007) .
reduce eqBlock (AND (x0000000A, xFFFFFFFB), x0000000A) .
reduce eqBlock (AND (x00000007, xFFFFFFFB), x00000003) .
reduce eqBlock (MUL1 (x00000002, x0000000A), x00000014) .
reduce eqBlock (MUL2A (x00000003, x00000003), x00000009) .
reduce eqBlock (XOR (x00000014, x00000009), x0000001D) .
reduce eqBlock (CYC (x00000004), x00000008) .
reduce eqBlock (XOR (x00000008, x00000001), x00000009) .
reduce eqBlock (XOR (x00000014, x00000002), x00000016) .
reduce eqBlock (XOR (x00000009, x00000002), x0000000B) .
reduce eqBlock (ADD (x00000009, x0000000B), x00000014) .
reduce eqBlock (ADD (x00000009, x00000016), x0000001F) .
reduce eqBlock (OR (x00000014, x00000002), x00000016) .
reduce eqBlock (OR (x0000001F, x00000001), x0000001F) .
reduce eqBlock (AND (x00000016, xFFFFFFFB), x00000012) .
reduce eqBlock (AND (x0000001F, xFFFFFFFB), x0000001B) .
reduce eqBlock (MUL1 (x00000016, x00000012), x0000018C) .
reduce eqBlock (MUL2A (x0000000B, x0000001B), x00000129) .
reduce eqBlock (XOR (x0000018C, x00000129), x000000A5) .
reduce eqBlock (CYC (xC4EB1AEB), x89D635D7) .
reduce eqBlock (XOR (x89D635D7, xF6A09667), x7F76A3B0) .
reduce eqBlock (XOR (x21D869BA, x0A202020), x2BF8499A) .
reduce eqBlock (XOR (x7792F9D4, x0A202020), x7DB2D9F4) .
reduce eqBlock (ADD (x7F76A3B0, x7DB2D9F4), xFD297DA4) .
reduce eqBlock (ADD (x7F76A3B0, x2BF8499A), xAB6EED4A) .
reduce eqBlock (OR (xFD297DA4, x02040801), xFF2D7DA5) .
reduce eqBlock (OR (xAB6EED4A, x00804021), xABEEED6B) .
reduce eqBlock (AND (xFF2D7DA5, xBFEF7FDF), xBF2D7D85) .
reduce eqBlock (AND (xABEEED6B, x7DFEFBFF), x29EEE96B) .
reduce eqBlock (MUL1 (x2BF8499A, xBF2D7D85), x0AD67E20) .
reduce eqBlock (MUL2A (x7DB2D9F4, x29EEE96B), x30261492) .
reduce eqOctet (PAT (x00FF00FF, x00000000), xFF) .
reduce eqPair (preludeXY (x00FF00FF, x00000000), buildPair (x4A645A01, x50DEC930)) .
reduce eqPair (preludeVW (x00FF00FF, x00000000), buildPair (x5CCA3239, xFECCAA6E)) .
reduce eqPair (preludeST (x00FF00FF, x00000000), buildPair (x51EDE9C7, x24B66FB5)) .
reduce eqPair (computeXY-prime (buildPair (x4A645A01, x50DEC930), x55555555, XOR (nCYC (n1, x5CCA3239), xFECCAA6E)), buildPair (x48B204D6, x5834A585)) .
reduce eqPair (computeXY-prime (buildPair (x48B204D6, x5834A585), xAAAAAAAA, XOR (nCYC (n2, x5CCA3239), xFECCAA6E)), buildPair (x4F998E01, xBE9F0917)) .
reduce eqPair (computeXY-prime (buildPair (x4F998E01, xBE9F0917), x51EDE9C7, XOR (nCYC (n3, x5CCA3239), xFECCAA6E)), buildPair (x344925FC, xDB9102B0)) .
reduce eqPair (computeXY-prime (buildPair (x344925FC, xDB9102B0), x24B66FB5, XOR (nCYC (n4, x5CCA3239), xFECCAA6E)), buildPair (x277B4B25, xD636250D)) .
reduce eqBlock (XOR (x277B4B25, xD636250D), xF14D6E28) .
reduce eqOctet (PAT (x00FF00FF, x00000000), xFF) .
reduce eqPair (preludeXY (x00FF00FF, x00000000), buildPair (x4A645A01, x50DEC930)) .
reduce eqPair (preludeVW (x00FF00FF, x00000000), buildPair (x5CCA3239, xFECCAA6E)) .
reduce eqPair (preludeST (x00FF00FF, x00000000), buildPair (x51EDE9C7, x24B66FB5)) .
reduce eqPair (computeXY-prime (buildPair (x4A645A01, x50DEC930), xAAAAAAAA, XOR (nCYC (n1, x5CCA3239), xFECCAA6E)), buildPair (x6AEBACF8, x9DB15CF6)) .
reduce eqPair (computeXY-prime (buildPair (x6AEBACF8, x9DB15CF6), x55555555, XOR (nCYC (n2, x5CCA3239), xFECCAA6E)), buildPair (x270EEDAF, xB8142629)) .
reduce eqPair (computeXY-prime (buildPair (x270EEDAF, xB8142629), x51EDE9C7, XOR (nCYC (n3, x5CCA3239), xFECCAA6E)), buildPair (x29907CD8, xBA92DB12)) .
reduce eqPair (computeXY-prime (buildPair (x29907CD8, xBA92DB12), x24B66FB5, XOR (nCYC (n4, x5CCA3239), xFECCAA6E)), buildPair (x28EAD8B3, x81D10CA3)) .
reduce eqBlock (XOR (x28EAD8B3, x81D10CA3), xA93BD410) .
reduce eqOctet (PAT (x55555555, x5A35D667), x00) .
reduce eqPair (preludeXY (x55555555, x5A35D667), buildPair (x34ACF886, x7397C9AE)) .
reduce eqPair (preludeVW (x55555555, x5A35D667), buildPair (x7201F4DC, x2829040B)) .
reduce eqPair (preludeST (x55555555, x5A35D667), buildPair (x9E2E7B36, x13647149)) .
reduce eqPair (computeXY-prime (buildPair (x34ACF886, x7397C9AE), x00000000, XOR (nCYC (n1, x7201F4DC), x2829040B)), buildPair (x2FD76FFB, x550D91CE)) .
reduce eqPair (computeXY-prime (buildPair (x2FD76FFB, x550D91CE), xFFFFFFFF, XOR (nCYC (n2, x7201F4DC), x2829040B)), buildPair (xA70FC148, x1D10D8D3)) .
reduce eqPair (computeXY-prime (buildPair (xA70FC148, x1D10D8D3), x9E2E7B36, XOR (nCYC (n3, x7201F4DC), x2829040B)), buildPair (xB1CC1CC5, x29C1485F)) .
reduce eqPair (computeXY-prime (buildPair (xB1CC1CC5, x29C1485F), x13647149, XOR (nCYC (n4, x7201F4DC), x2829040B)), buildPair (x288FC786, x9115A558)) .
reduce eqBlock (XOR (x288FC786, x9115A558), xB99A62DE) .
reduce eqOctet (PAT (x55555555, x5A35D667), x00) .
reduce eqPair (preludeXY (x55555555, x5A35D667), buildPair (x34ACF886, x7397C9AE)) .
reduce eqPair (preludeVW (x55555555, x5A35D667), buildPair (x7201F4DC, x2829040B)) .
reduce eqPair (preludeST (x55555555, x5A35D667), buildPair (x9E2E7B36, x13647149)) .
reduce eqPair (computeXY-prime (buildPair (x34ACF886, x7397C9AE), xFFFFFFFF, XOR (nCYC (n1, x7201F4DC), x2829040B)), buildPair (x8DC8BBDE, xFE4E5BDD)) .
reduce eqPair (computeXY-prime (buildPair (x8DC8BBDE, xFE4E5BDD), x00000000, XOR (nCYC (n2, x7201F4DC), x2829040B)), buildPair (xCBC865BA, x0297AF6F)) .
reduce eqPair (computeXY-prime (buildPair (xCBC865BA, x0297AF6F), x9E2E7B36, XOR (nCYC (n3, x7201F4DC), x2829040B)), buildPair (x3CF3A7D2, x160EE9B5)) .
reduce eqPair (computeXY-prime (buildPair (x3CF3A7D2, x160EE9B5), x13647149, XOR (nCYC (n4, x7201F4DC), x2829040B)), buildPair (xD0482465, x7050EC5E)) .
reduce eqBlock (XOR (xD0482465, x7050EC5E), xA018C83B) .
reduce eqPair (preludeXY (xE6A12F07, x9D15C437), buildPair (x21D869BA, x7792F9D4)) .
reduce eqPair (preludeVW (xE6A12F07, x9D15C437), buildPair (xC4EB1AEB, xF6A09667)) .
reduce eqPair (preludeST (xE6A12F07, x9D15C437), buildPair (x6D67E884, xA511987A)) .
reduce eqPair (computeXY-prime (buildPair (x204E80A7, x077788A2), x00000000, XOR (nCYC (n1, x17A808FD), xFEA1D334)), buildPair (x303FF4AA, x1277A6D4)) .
reduce eqPair (computeXY-prime (buildPair (x303FF4AA, x1277A6D4), x00000000, XOR (nCYC (n2, x17A808FD), xFEA1D334)), buildPair (x55DD063F, x4C49AAE0)) .
reduce eqPair (computeXY-prime (buildPair (x55DD063F, x4C49AAE0), x00000000, XOR (nCYC (n3, x17A808FD), xFEA1D334)), buildPair (x51AF3C1D, x5BC02502)) .
reduce eqPair (computeXY-prime (buildPair (x51AF3C1D, x5BC02502), x00000000, XOR (nCYC (n4, x17A808FD), xFEA1D334)), buildPair (xA44AAAC0, x63C70DBA)) .
reduce eqPair (computeXY-prime (buildPair (xA44AAAC0, x63C70DBA), x00000000, XOR (nCYC (n5, x17A808FD), xFEA1D334)), buildPair (x4D53901A, x2E80AC30)) .
reduce eqPair (computeXY-prime (buildPair (x4D53901A, x2E80AC30), x00000000, XOR (nCYC (n6, x17A808FD), xFEA1D334)), buildPair (x5F38EEF1, x2A6091AE)) .
reduce eqPair (computeXY-prime (buildPair (x5F38EEF1, x2A6091AE), x00000000, XOR (nCYC (n7, x17A808FD), xFEA1D334)), buildPair (xF0239DD5, x3DD81AC6)) .
reduce eqPair (computeXY-prime (buildPair (xF0239DD5, x3DD81AC6), x00000000, XOR (nCYC (n8, x17A808FD), xFEA1D334)), buildPair (xEB35B97F, x9372CDC6)) .
reduce eqPair (computeXY-prime (buildPair (xEB35B97F, x9372CDC6), x00000000, XOR (nCYC (n9, x17A808FD), xFEA1D334)), buildPair (x4DA124A1, xC6B1317E)) .
reduce eqPair (computeXY-prime (buildPair (x4DA124A1, xC6B1317E), x00000000, XOR (nCYC (n10, x17A808FD), xFEA1D334)), buildPair (x7F839576, x74B39176)) .
reduce eqPair (computeXY-prime (buildPair (x7F839576, x74B39176), x00000000, XOR (nCYC (n11, x17A808FD), xFEA1D334)), buildPair (x11A9D254, xD78634BC)) .
reduce eqPair (computeXY-prime (buildPair (x11A9D254, xD78634BC), x00000000, XOR (nCYC (n12, x17A808FD), xFEA1D334)), buildPair (xD8804CA5, xFDC1A8BA)) .
reduce eqPair (computeXY-prime (buildPair (xD8804CA5, xFDC1A8BA), x00000000, XOR (nCYC (n13, x17A808FD), xFEA1D334)), buildPair (x3F6F7248, x11AC46B8)) .
reduce eqPair (computeXY-prime (buildPair (x3F6F7248, x11AC46B8), x00000000, XOR (nCYC (n14, x17A808FD), xFEA1D334)), buildPair (xACBC13DD, x33D5A466)) .
reduce eqPair (computeXY-prime (buildPair (xACBC13DD, x33D5A466), x00000000, XOR (nCYC (n15, x17A808FD), xFEA1D334)), buildPair (x4CE933E1, xC21A1846)) .
reduce eqPair (computeXY-prime (buildPair (x4CE933E1, xC21A1846), x00000000, XOR (nCYC (n16, x17A808FD), xFEA1D334)), buildPair (xC1ED90DD, xCD959B46)) .
reduce eqPair (computeXY-prime (buildPair (xC1ED90DD, xCD959B46), x00000000, XOR (nCYC (n17, x17A808FD), xFEA1D334)), buildPair (x3CD54DEB, x613F8E2A)) .
reduce eqPair (computeXY-prime (buildPair (x3CD54DEB, x613F8E2A), x00000000, XOR (nCYC (n18, x17A808FD), xFEA1D334)), buildPair (xBBA57835, x07C72EAA)) .
reduce eqPair (computeXY-prime (buildPair (xBBA57835, x07C72EAA), x00000000, XOR (nCYC (n19, x17A808FD), xFEA1D334)), buildPair (xD7843FDC, x6AD6E8A4)) .
reduce eqPair (computeXY-prime (buildPair (xD7843FDC, x6AD6E8A4), x00000000, XOR (nCYC (n20, x17A808FD), xFEA1D334)), buildPair (x5EBA06C2, x91896CFA)) .
reduce eqPair (computeXY-prime (buildPair (x5EBA06C2, x91896CFA), x76232E5F, XOR (nCYC (n21, x17A808FD), xFEA1D334)), buildPair (x1D9C9655, x98D1CC75)) .
reduce eqPair (computeXY-prime (buildPair (x1D9C9655, x98D1CC75), x4FB1138A, XOR (nCYC (n22, x17A808FD), xFEA1D334)), buildPair (x7BC180AB, xA0B87B77)) .
reduce eqBlock (MAC (buildKey (x80018001, x80018000), makeMessage (n20, x00000000, x00000000)), xDB79FBDC) .
reduce eqBlock (MAC (buildKey (x80018001, x80018000), makeMessage (n16, x00000000, x07050301)), x8CE37709) .
reduce eqBlock (MAC (buildKey (x80018001, x80018000), makeMessage (n256, x00000000, x07050301)), x717153D5) .
reduce eqBlock (MAC (buildKey (x80018001, x80018000), makeMessage (n4100, x00000000, x07050301)), x7783C51D) .
quit
